package notifications

import (
	"errors"
	"fmt"

	"vulnerabilitytracer/db/generated/queries"
)

const (
	newVulnerabilityInServiceDashboardTemplate = `New vulnerability %s discovered in service %s, restart it to start counting the triggers`
	mitigationAppliedDashboardTemplate         = `Service %s has to be restarted in order to apply mitigation strategies for vulnerability %s`
	newVulnerabilityInServiceShortTemplate     = `Restart service to start counting the triggers`
	mitigationAppliedShortTemplate             = `Restart service to apply mitigation strategies`
)

var (
	ErrMissingServiceName             = errors.New("service name is required for templating")
	ErrMissingVulnerabilityExternalID = errors.New("service name is required for templating")
	ErrIncorrectNotificationType      = errors.New("no template exists for the notification type")
)

func TemplateDashboardNotification(notificationType queries.NotificationsNotificationType,
	serviceName *string, vulnerabilityExternalID *string,
) (string, error) {
	switch notificationType {
	case queries.NotificationsNotificationTypeNEWVULNERABILITYINSERVICE:
		if serviceName == nil {
			return "", ErrMissingServiceName
		}

		if vulnerabilityExternalID == nil {
			return "", ErrMissingVulnerabilityExternalID
		}

		return fmt.Sprintf(newVulnerabilityInServiceDashboardTemplate, *vulnerabilityExternalID, *serviceName), nil
	case queries.NotificationsNotificationTypeMITIGATIONAPPLIED:
		if serviceName == nil {
			return "", ErrMissingServiceName
		}

		if vulnerabilityExternalID == nil {
			return "", ErrMissingServiceName
		}

		return fmt.Sprintf(mitigationAppliedDashboardTemplate, *serviceName, *vulnerabilityExternalID), nil
	default:
		panic(ErrIncorrectNotificationType)
	}
}

func TemplateShortNotification(notificationType queries.NotificationsNotificationType,
) string {
	switch notificationType {
	case queries.NotificationsNotificationTypeNEWVULNERABILITYINSERVICE:
		return newVulnerabilityInServiceShortTemplate
	case queries.NotificationsNotificationTypeMITIGATIONAPPLIED:
		return mitigationAppliedShortTemplate
	default:
		panic(ErrIncorrectNotificationType)
	}
}

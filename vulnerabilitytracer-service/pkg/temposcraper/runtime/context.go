package runtime

import (
	"vulnerabilitytracer/api/generated/tempoquerierapi"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/db"
	tempoquerier2 "vulnerabilitytracer/pkg/temposcraper/tempoquerier"
	"vulnerabilitytracer/pkg/utils"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/sirupsen/logrus"
)

type Context struct {
	DBPool             *pgxpool.Pool
	DBQueries          *queries.Queries
	TempoQuerierClient *tempoquerierapi.ClientWithResponses
}

func (c *Context) Close() {
	c.DBPool.Close()
	logrus.Info("runtime context shutdown complete")
}

func Build(tempoQuerierConfig tempoquerier2.Config, databaseConfig db.Config) (*Context, error) {
	// Tempo querier client
	tempoQuerierClient, err := tempoquerier2.NewQuerierClient(tempoQuerierConfig.QuerierURL)
	if err != nil {
		return nil, err
	}

	// Database
	databaseURL := utils.BuildDatabaseURL(databaseConfig)
	dbPool, err := db.NewConnectionPool(databaseURL)
	if err != nil {
		return nil, err
	}

	dbQueries := queries.New(dbPool)

	return &Context{
		DBPool:             dbPool,
		DBQueries:          dbQueries,
		TempoQuerierClient: tempoQuerierClient,
	}, nil
}

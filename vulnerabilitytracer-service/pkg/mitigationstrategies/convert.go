package mitigationstrategies

import (
	"vulnerabilitytracer/api/generated/coordinatorapi"
	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/db/generated/queries"
)

func ConvertStringToCoordinatorAPIMitigationStrategy(strategy *string) coordinatorapi.MitigationStrategy {
	if strategy == nil {
		return coordinatorapi.NONE
	}

	switch *strategy {
	case "ERROR":
		return coordinatorapi.ERROR
	case "NOOP":
		return coordinatorapi.NOOP
	default:
		return coordinatorapi.NONE
	}
}

func ConvertStringToManagerAPIMitigationStrategy(strategy *string) managerapi.MitigationStrategy {
	if strategy == nil {
		return managerapi.NONE
	}

	switch *strategy {
	case "ERROR":
		return managerapi.ERROR
	case "NOOP":
		return managerapi.NOOP
	default:
		return managerapi.NONE
	}
}

func ConvertStringToDatabaseEnum(strategy *string) queries.ServiceMitigationStrategyType {
	if strategy == nil {
		return queries.ServiceMitigationStrategyTypeNONE
	}

	switch *strategy {
	case "ERROR":
		return queries.ServiceMitigationStrategyTypeERROR
	case "NOOP":
		return queries.ServiceMitigationStrategyTypeNOOP
	default:
		return queries.ServiceMitigationStrategyTypeNONE
	}
}

func ConvertCoordinatorAPIMitigationStrategyToDatabaseEnum(strategy *coordinatorapi.MitigationStrategy) queries.ServiceMitigationStrategyType {
	if strategy == nil {
		return queries.ServiceMitigationStrategyTypeNONE
	}

	return ConvertStringToDatabaseEnum((*string)(strategy))
}

func ConvertManagerAPIMitigationStrategyToDatabaseEnum(strategy *managerapi.MitigationStrategy) queries.ServiceMitigationStrategyType {
	if strategy == nil {
		return queries.ServiceMitigationStrategyTypeNONE
	}

	return ConvertStringToDatabaseEnum((*string)(strategy))
}

func ConvertDatabaseEnumToCoordinatorAPIMitigationStrategy(strategy *queries.ServiceMitigationStrategyType) coordinatorapi.MitigationStrategy {
	if strategy == nil {
		return coordinatorapi.NONE
	}

	return ConvertStringToCoordinatorAPIMitigationStrategy((*string)(strategy))
}

func ConvertDatabaseEnumToManagerAPIMitigationStrategy(strategy *queries.ServiceMitigationStrategyType) managerapi.MitigationStrategy {
	if strategy == nil {
		return managerapi.NONE
	}

	return ConvertStringToManagerAPIMitigationStrategy((*string)(strategy))
}

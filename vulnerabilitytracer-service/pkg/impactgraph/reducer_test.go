package impactgraph_test

import (
	"github.com/google/uuid"
	"github.com/stretchr/testify/require"
	"testing"
	"vulnerabilitytracer/pkg/impactgraph"
)

func TestReducingImpactGraph(t *testing.T) {
	tests := []struct {
		name         string
		inputGraph   impactgraph.Graph
		reducedGraph impactgraph.Graph
		returnsError bool
	}{
		{
			name:         "reducing straight impact graph works",
			inputGraph:   buildStraightImpactGraph(),
			reducedGraph: buildReducedStraightImpactGraph(),
			returnsError: false,
		},
		{
			name:         "reducing reduced straight impact graph returns the same graph",
			inputGraph:   buildReducedStraightImpactGraph(),
			reducedGraph: buildReducedStraightImpactGraph(),
			returnsError: false,
		},
		{
			name:         "reducing tree impact graph works",
			inputGraph:   buildTreeImpactGraph(),
			reducedGraph: buildReducedTreeImpactGraph(),
			returnsError: false,
		},
		{
			name:         "reducing reduced tree impact returns the same graph",
			inputGraph:   buildReducedTreeImpactGraph(),
			reducedGraph: buildReducedTreeImpactGraph(),
			returnsError: false,
		},
		{
			name:         "reducing non-rooted impact graph returns error",
			inputGraph:   buildNonRootedImpactGraph(),
			reducedGraph: nil,
			returnsError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When
			reducedGraph, err := impactgraph.ReduceImpactGraph(tt.inputGraph)

			// Then
			if tt.returnsError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)

				reducedGraphsEqual, err := impactgraph.Equal(reducedGraph, tt.reducedGraph)
				if err != nil {
					require.Failf(t, "error in utility method", "failed to compare reduced graphs: %w", err)
				}

				require.True(t, reducedGraphsEqual)
			}
		})
	}

}

func buildStraightImpactGraph() impactgraph.Graph {
	uuids := []uuid.UUID{
		uuid.MustParse("17b1be13-69ee-41cc-9f0d-8f86ecca428f"),
		uuid.MustParse("8b9be8fc-38cd-4b21-b5c8-5b18477b7b64"),
		uuid.MustParse("36eddbb6-7986-4fa9-a268-bb624b8255fd"),
		uuid.MustParse("411d70f2-9635-41a2-9d29-bb1a48677a98"),
	}

	resultGraph := impactgraph.NewGraph()
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-1",
		ServiceName: "service-1",
		UUID:        uuids[0],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-2",
		ServiceName: "service-2",
		UUID:        uuids[1],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-3",
		ServiceName: "service-2",
		UUID:        uuids[2],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-4",
		ServiceName: "service-3",
		UUID:        uuids[3],
	})

	_ = resultGraph.AddEdge(uuids[0], uuids[1])
	_ = resultGraph.AddEdge(uuids[1], uuids[2])
	_ = resultGraph.AddEdge(uuids[2], uuids[3])
	return resultGraph
}

func buildReducedStraightImpactGraph() impactgraph.Graph {
	uuids := []uuid.UUID{
		uuid.MustParse("17b1be13-69ee-41cc-9f0d-8f86ecca428f"),
		uuid.MustParse("8b9be8fc-38cd-4b21-b5c8-5b18477b7b64"),
		uuid.MustParse("36eddbb6-7986-4fa9-a268-bb624b8255fd"),
		uuid.MustParse("411d70f2-9635-41a2-9d29-bb1a48677a98"),
	}

	resultGraph := impactgraph.NewGraph()
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-1",
		ServiceName: "service-1",
		UUID:        uuids[0],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-2",
		ServiceName: "service-2",
		UUID:        uuids[1],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-4",
		ServiceName: "service-3",
		UUID:        uuids[3],
	})

	_ = resultGraph.AddEdge(uuids[0], uuids[1])
	_ = resultGraph.AddEdge(uuids[1], uuids[3])
	return resultGraph
}

func buildTreeImpactGraph() impactgraph.Graph {
	uuids := []uuid.UUID{
		uuid.MustParse("17b1be13-69ee-41cc-9f0d-8f86ecca428f"),
		uuid.MustParse("8b9be8fc-38cd-4b21-b5c8-5b18477b7b64"),
		uuid.MustParse("36eddbb6-7986-4fa9-a268-bb624b8255fd"),
		uuid.MustParse("411d70f2-9635-41a2-9d29-bb1a48677a98"),
		uuid.MustParse("85002ca6-5f9b-4391-aed6-9fe579243d28"),
	}

	resultGraph := impactgraph.NewGraph()
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-1",
		ServiceName: "service-1",
		UUID:        uuids[0],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-2",
		ServiceName: "service-2",
		UUID:        uuids[1],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-3",
		ServiceName: "service-2",
		UUID:        uuids[2],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-4",
		ServiceName: "service-3",
		UUID:        uuids[3],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-5",
		ServiceName: "service-4",
		UUID:        uuids[4],
	})

	_ = resultGraph.AddEdge(uuids[0], uuids[1])
	_ = resultGraph.AddEdge(uuids[1], uuids[2])
	_ = resultGraph.AddEdge(uuids[2], uuids[3])
	_ = resultGraph.AddEdge(uuids[2], uuids[4])
	return resultGraph
}

func buildReducedTreeImpactGraph() impactgraph.Graph {
	uuids := []uuid.UUID{
		uuid.MustParse("17b1be13-69ee-41cc-9f0d-8f86ecca428f"),
		uuid.MustParse("8b9be8fc-38cd-4b21-b5c8-5b18477b7b64"),
		uuid.MustParse("36eddbb6-7986-4fa9-a268-bb624b8255fd"),
		uuid.MustParse("411d70f2-9635-41a2-9d29-bb1a48677a98"),
		uuid.MustParse("85002ca6-5f9b-4391-aed6-9fe579243d28"),
	}

	resultGraph := impactgraph.NewGraph()
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-1",
		ServiceName: "service-1",
		UUID:        uuids[0],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-2",
		ServiceName: "service-2",
		UUID:        uuids[1],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-4",
		ServiceName: "service-3",
		UUID:        uuids[3],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-5",
		ServiceName: "service-4",
		UUID:        uuids[4],
	})

	_ = resultGraph.AddEdge(uuids[0], uuids[1])
	_ = resultGraph.AddEdge(uuids[1], uuids[3])
	_ = resultGraph.AddEdge(uuids[1], uuids[4])
	return resultGraph
}

func buildNonRootedImpactGraph() impactgraph.Graph {
	uuids := []uuid.UUID{
		uuid.MustParse("17b1be13-69ee-41cc-9f0d-8f86ecca428f"),
		uuid.MustParse("8b9be8fc-38cd-4b21-b5c8-5b18477b7b64"),
		uuid.MustParse("36eddbb6-7986-4fa9-a268-bb624b8255fd"),
		uuid.MustParse("411d70f2-9635-41a2-9d29-bb1a48677a98"),
		uuid.MustParse("85002ca6-5f9b-4391-aed6-9fe579243d28"),
	}

	resultGraph := impactgraph.NewGraph()
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-1",
		ServiceName: "service-1",
		UUID:        uuids[0],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-2",
		ServiceName: "service-2",
		UUID:        uuids[1],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-3",
		ServiceName: "service-2",
		UUID:        uuids[2],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-4",
		ServiceName: "service-3",
		UUID:        uuids[3],
	})
	_ = resultGraph.AddVertex(impactgraph.Node{
		TempoID:     "tempo-id-5",
		ServiceName: "service-4",
		UUID:        uuids[4],
	})

	_ = resultGraph.AddEdge(uuids[0], uuids[1])
	_ = resultGraph.AddEdge(uuids[1], uuids[2])
	_ = resultGraph.AddEdge(uuids[3], uuids[2])
	_ = resultGraph.AddEdge(uuids[4], uuids[2])
	return resultGraph
}

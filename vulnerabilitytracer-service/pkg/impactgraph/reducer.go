package impactgraph

import (
	"fmt"
	"github.com/dominikbraun/graph"
	"github.com/google/uuid"
)

func ReduceImpactGraph(impactGraph graph.Graph[uuid.UUID, Node]) (graph.Graph[uuid.UUID, Node], error) {
	reducedGraph, err := impactGraph.Clone()
	if err != nil {
		return nil, fmt.Errorf("failed to clone impact graph: %w", err)
	}

	searchRoot, err := FindRoot(reducedGraph)
	if err != nil {
		return nil, fmt.Errorf("failed to find root in impact graph: %w", err)
	}

	for {
		var predecessorUUID uuid.UUID
		var nodeUUIDToReduce uuid.UUID

		successorMap, err := reducedGraph.AdjacencyMap()

		err = graph.BFS(reducedGraph, *searchRoot, func(nodeUUID uuid.UUID) bool {
			node, _ := reducedGraph.Vertex(nodeUUID)
			successors := successorMap[nodeUUID]
			for successorUUID := range successors {
				successorNode, _ := reducedGraph.Vertex(successorUUID)
				if successorNode.ServiceName == node.ServiceName {
					predecessorUUID = nodeUUID
					nodeUUIDToReduce = successorUUID

					return true
				}
			}

			return false
		})
		if err != nil {
			return nil, fmt.Errorf("failed to perform search on the impact graph: %w", err)
		}

		if nodeUUIDToReduce == uuid.Nil {
			// No more nodes to reduce
			break
		}

		// Reduce the node (connect outgoing edges of reduced node to predecessor)
		outgoingEdges := successorMap[nodeUUIDToReduce]

		for successorUUID := range outgoingEdges {
			// Connect outgoing edges of reduced node to predecessor
			err := reducedGraph.AddEdge(predecessorUUID, successorUUID)
			if err != nil {
				return nil, fmt.Errorf("failed to connect outgoing edge of reduced node to predecessor: %w", err)
			}

			// Disconnect the outgoing edges of the reduced node
			err = reducedGraph.RemoveEdge(nodeUUIDToReduce, successorUUID)
			if err != nil {
				return nil, fmt.Errorf("failed to disconnect the outgoing edge of the reduced node: %w", err)
			}
		}

		// Disconnect the reduced node from its predecessor
		err = reducedGraph.RemoveEdge(predecessorUUID, nodeUUIDToReduce)
		if err != nil {
			return nil, fmt.Errorf("failed to disconnect the reduced node from its predecessor: %w", err)
		}

		// Remove the node from the graph
		err = reducedGraph.RemoveVertex(nodeUUIDToReduce)
		if err != nil {
			return nil, fmt.Errorf("failed to remove node from the impact graph: %w", err)
		}

		// Set the new search root to predecessor
		searchRoot = &predecessorUUID
	}

	return reducedGraph, nil
}

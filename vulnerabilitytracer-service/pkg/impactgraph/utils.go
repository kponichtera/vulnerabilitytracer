package impactgraph

import (
	"errors"
	"fmt"
	"github.com/dominikbraun/graph"
)

var (
	ErrGraphNotRooted         = errors.New("graph is not rooted")
	ErrRootedGraphWithoutRoot = errors.New("could not find a root node in the graph")
)

func FindRoot[K comparable, T any](graph graph.Graph[K, T]) (*K, error) {
	if !graph.Traits().IsRooted {
		return nil, ErrGraphNotRooted
	}

	predecessorMap, err := graph.PredecessorMap()
	if err != nil {
		return nil, fmt.Errorf("failed to get predecessor map: %w", err)
	}

	var root *K

	for nodeUUID, predecessors := range predecessorMap {
		if len(predecessors) == 0 {
			root = &nodeUUID
			break
		}
	}

	if root == nil {
		return nil, ErrRootedGraphWithoutRoot
	}

	return root, nil
}

package service

import (
	"context"
	"fmt"
	"vulnerabilitytracer/api/generated/coordinatorapi"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/coordinator/runtime"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/sirupsen/logrus"
)

func AddMockVulnerability(ctx context.Context, runtimeCtx runtime.Context,
	request coordinatorapi.AddMockVulnerabilityRequestPayload,
) error {
	err := runtimeCtx.DBQueries.CreateMockVulnerability(ctx, queries.CreateMockVulnerabilityParams{
		ExternalID: request.VulnerabilityExternalId,
		Severity:   string(request.Severity),
		GroupID:    request.Dependency.GroupId,
		ArtifactID: request.Dependency.ArtifactId,
		Version:    request.Dependency.Version,
	})
	if err != nil {
		return fmt.Errorf("error when creating mock vulnerability: %w", err)
	}

	logrus.
		WithField("externalID", request.VulnerabilityExternalId).
		Info("mock vulnerability created")

	return nil
}

func AddMockVulnerableCallable(ctx context.Context, runtimeCtx runtime.Context,
	request coordinatorapi.AddMockVulnerableCallableRequestPayload,
) error {
	tx, err := runtimeCtx.DBPool.BeginTx(ctx, pgx.TxOptions{
		IsoLevel: pgx.ReadCommitted,
	})
	if err != nil {
		return fmt.Errorf("error when starting transaction: %w", err)
	}
	defer tx.Commit(ctx)

	// Add callable
	callableId, err := runtimeCtx.DBQueries.WithTx(tx).CreateMockCallable(ctx, queries.CreateMockCallableParams{
		FastenID:                 uuid.NewString(),
		PackageName:              request.PackageName,
		ClassName:                request.ClassName,
		MethodName:               request.MethodName,
		VulnerabilityExternalIds: request.VulnerabilityExternalIds,
	})
	if err != nil {
		tx.Rollback(ctx)
		return fmt.Errorf("error when creating mock callable: %w", err)
	}

	logrus.
		WithField("callableID", callableId).
		Info("mock callable created")

	// Add mitigation strategy for the service (if service name is provided)
	if request.ServiceName != nil && request.MitigationStrategy != nil {
		err := runtimeCtx.DBQueries.WithTx(tx).CreateMockMitigationStrategy(ctx, queries.CreateMockMitigationStrategyParams{
			Name:       *request.ServiceName,
			CallableID: callableId,
			Strategy:   string(*request.MitigationStrategy),
		})
		if err != nil {
			tx.Rollback(ctx)
			return fmt.Errorf("error when creating mock mitigation strategy: %w", err)
		}

		logrus.
			WithField("serviceName", *request.ServiceName).
			WithField("mitigationStrategy", *request.MitigationStrategy).
			WithField("callableID", callableId).
			Info("mock mitigation strategy created")
	}

	return nil
}

package server

import (
	"context"

	"vulnerabilitytracer/pkg/coordinator/runtime"

	"vulnerabilitytracer/api/generated/coordinatorapi"
	"vulnerabilitytracer/pkg/coordinator/service"

	"github.com/sirupsen/logrus"
)

type serverInterfaceImpl struct {
	runtime.Context
}

func (s serverInterfaceImpl) Register(ctx context.Context, request coordinatorapi.RegisterRequestObject) (coordinatorapi.RegisterResponseObject, error) {
	callables, err := service.Register(ctx, s.Context, request.Body.ServiceName, request.Body.Dependencies)
	if err != nil {
		logrus.WithError(err).Error("error when registering service")
		return coordinatorapi.Register500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.Register200JSONResponse{
		Callables: &callables,
	}, nil
}

func (s serverInterfaceImpl) AddMockCallable(ctx context.Context, request coordinatorapi.AddMockCallableRequestObject) (coordinatorapi.AddMockCallableResponseObject, error) {
	err := service.AddMockVulnerableCallable(ctx, s.Context, *request.Body)
	if err != nil {
		logrus.WithError(err).Error("error when adding mock vulnerable callable")
		return coordinatorapi.AddMockCallable500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.AddMockCallable200Response{}, nil
}

func (s serverInterfaceImpl) AddMockVulnerability(ctx context.Context, request coordinatorapi.AddMockVulnerabilityRequestObject) (coordinatorapi.AddMockVulnerabilityResponseObject, error) {
	err := service.AddMockVulnerability(ctx, s.Context, *request.Body)
	if err != nil {
		logrus.WithError(err).Error("error when adding mock vulnerability")
		return coordinatorapi.AddMockVulnerability500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.AddMockVulnerability200Response{}, nil
}

func (s serverInterfaceImpl) Liveness(ctx context.Context, request coordinatorapi.LivenessRequestObject) (coordinatorapi.LivenessResponseObject, error) {
	return coordinatorapi.Liveness200Response{}, nil
}

func (s serverInterfaceImpl) Readiness(ctx context.Context, request coordinatorapi.ReadinessRequestObject) (coordinatorapi.ReadinessResponseObject, error) {
	err := s.DBPool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return coordinatorapi.Readiness200Response{}, nil
}

package server

import (
	"context"
	"vulnerabilitytracer/pkg/coordinator/runtime"

	"vulnerabilitytracer/api/generated/coordinatorapi"
	"vulnerabilitytracer/pkg/coordinator/service"

	"github.com/sirupsen/logrus"
)

type serverInterfaceImpl struct {
	runtime.Context
}

func (s serverInterfaceImpl) PostApiRegister(ctx context.Context, request coordinatorapi.PostApiRegisterRequestObject) (coordinatorapi.PostApiRegisterResponseObject, error) {
	existingServiceId, err := service.CheckServiceRegistration(ctx, s.Context, request.Body.ServiceName, request.Body.Dependencies)
	if err != nil {
		logrus.WithError(err).Error("error when registering service")
		return coordinatorapi.PostApiRegister500JSONResponse{Message: err.Error()}, nil
	}

	if existingServiceId == nil {
		// Service was not registered previously - register it and its dependencies
		serviceID, err := service.RegisterService(ctx, s.Context, request.Body.ServiceName, request.Body.Dependencies)
		if err != nil {
			logrus.WithError(err).Error("error when registering service")
			return coordinatorapi.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		dependencyIDs, err := service.RegisterServiceDependencies(ctx, s.Context, serviceID, request.Body.Dependencies)
		if err != nil {
			logrus.WithError(err).Error("error when registering service dependencies")
			return coordinatorapi.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		vulnerableCallables, err := service.RegisterVulnerabilitiesAndCallables(ctx, s.Context, dependencyIDs)
		if err != nil {
			return coordinatorapi.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		return coordinatorapi.PostApiRegister200JSONResponse{
			Callables: &vulnerableCallables,
		}, nil
	}

	// Service was registered previously - return its vulnerable callables
	vulnerableCallables, err := service.QueryServiceVulnerableCallables(ctx, s.Context, *existingServiceId)
	if err != nil {
		return coordinatorapi.PostApiRegister500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.PostApiRegister200JSONResponse{
		Callables: &vulnerableCallables,
	}, nil
}

func (s serverInterfaceImpl) PostApiMockAddCallable(ctx context.Context, request coordinatorapi.PostApiMockAddCallableRequestObject) (coordinatorapi.PostApiMockAddCallableResponseObject, error) {
	err := service.AddMockVulnerableCallable(ctx, s.Context, *request.Body)
	if err != nil {
		logrus.WithError(err).Error("error when adding mock vulnerable callable")
		return coordinatorapi.PostApiMockAddCallable500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.PostApiMockAddCallable200Response{}, nil
}

func (s serverInterfaceImpl) PostApiMockAddVulnerability(ctx context.Context, request coordinatorapi.PostApiMockAddVulnerabilityRequestObject) (coordinatorapi.PostApiMockAddVulnerabilityResponseObject, error) {
	err := service.AddMockVulnerability(ctx, s.Context, *request.Body)
	if err != nil {
		logrus.WithError(err).Error("error when adding mock vulnerability")
		return coordinatorapi.PostApiMockAddVulnerability500JSONResponse{Message: err.Error()}, nil
	}

	return coordinatorapi.PostApiMockAddVulnerability200Response{}, nil
}

func (s serverInterfaceImpl) GetLiveness(ctx context.Context, request coordinatorapi.GetLivenessRequestObject) (coordinatorapi.GetLivenessResponseObject, error) {
	err := s.DBPool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return coordinatorapi.GetLiveness200Response{}, nil
}

func (s serverInterfaceImpl) GetReadiness(ctx context.Context, request coordinatorapi.GetReadinessRequestObject) (coordinatorapi.GetReadinessResponseObject, error) {
	return coordinatorapi.GetReadiness200Response{}, nil
}

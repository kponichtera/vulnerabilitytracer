package fasten_test

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	"vulnerabilitytracer-service/pkg/fasten"
)

func TestExtractingPackageFromFastenURI(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name      string
		fastenURI string
		want      string
	}{
		{
			name:      "extracting package from full FASTEN URI works",
			fastenURI: "fasten://mvn!dom4j:dom4j$1.6.1/org.dom4j.io/SAXReader.isValidating()%2Fjava.lang%2FBooleanType",
			want:      "org.dom4j.io",
		},
		{
			name:      "extracting package from simple FASTEN URI works",
			fastenURI: "/org.springframework.util/ConcurrentReferenceHashMap.%3Cinit%3E()%2Fjava.lang%2FVoidType",
			want:      "org.springframework.util",
		},
		{
			name:      "extracting package from simple FASTEN URI works",
			fastenURI: "/org.springframework.core.convert.support/ConfigurableConversionService.addConverter(%2Forg.springframework.core.convert.converter%2FConverter)%2Fjava.lang%2FVoidType",
			want:      "org.springframework.core.convert.support",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When
			got, err := fasten.JavaPackageFromFastenURI(tt.fastenURI)

			// Then
			require.NoError(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestExtractingPackageFromMalformedFastenURI(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name      string
		fastenURI string
	}{
		{
			name:      "extracting package from malformed FASTEN URI returns error",
			fastenURI: "/org.springframework.utilConcurrentReferenceHashMap.%3Cinit%3E()%2Fjava.lang%2FVoidType",
		},
		{
			name:      "extracting package from malformed FASTEN URI returns error",
			fastenURI: "org.springframework.core.convert.support/ConfigurableConversionService.addConverter(%2Forg.springframework.core.convert.converter%2FConverter)%2Fjava.lang%2FVoidType",
		},
		{
			name:      "extracting package from malformed FASTEN URI returns error",
			fastenURI: "fasten:/org.springframework.core.convert.support/ConfigurableConversionService.addConverter(%2Forg.springframework.core.convert.converter%2FConverter)%2Fjava.lang%2FVoidType",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When
			_, err := fasten.JavaPackageFromFastenURI(tt.fastenURI)

			// Then
			require.ErrorIs(t, err, fasten.ErrMalformedFastenURI)
		})
	}
}

package fasten

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/sirupsen/logrus"

	"vulnerabilitytracer-service/api/generated/fastenapi"
)

type PackageStatus int

const (
	PackageStatusProcessed PackageStatus = iota
	PackageStatusQueued    PackageStatus = iota
	PackageStatusUnknown   PackageStatus = iota
)

var (
	ErrUnexpectedAPIResponse = errors.New("unexpected FASTEN API response")
	ErrNoJSONBody            = errors.New("body did not contain parseable JSON")
)

func NewAPIClient(fastenAPIURL string) (*fastenapi.ClientWithResponses, error) {
	client, err := fastenapi.NewClientWithResponses(fastenAPIURL)
	if err != nil {
		return nil, fmt.Errorf("error when creating FASTEN API client: %w", err)
	}

	return client, nil
}

func GetPackageWithoutBody(
	ctx context.Context, client *fastenapi.ClientWithResponses,
	groupID string, artifactID string, version string,
) (PackageStatus, error) {
	logrus.
		WithField("groupID", groupID).
		WithField("artifactID", artifactID).
		WithField("version", version).
		Info("requesting package status from FASTEN API")

	response, err := client.GetApiMvnPackagesGroupIdArtifactIdVersionWithResponse(ctx, groupID, artifactID, version)
	if err != nil {
		return PackageStatusUnknown, fmt.Errorf("error when calling FASTEN API: %w", err)
	}

	switch response.StatusCode() {
	case http.StatusOK:
		return PackageStatusProcessed, nil
	case http.StatusCreated:
		return PackageStatusQueued, nil
	default:
		return PackageStatusUnknown, fmt.Errorf("unexpected status code %d: %w", response.StatusCode(), ErrUnexpectedAPIResponse)
	}
}

func GetSimpleVulnerabilities(
	ctx context.Context, client *fastenapi.ClientWithResponses,
	groupID string, artifactID string, version string,
) ([]fastenapi.PackageVulnerability, error) {
	logrus.
		WithField("groupID", groupID).
		WithField("artifactID", artifactID).
		WithField("version", version).
		Trace("requesting package vulnerabilities from FASTEN API")

	attributes := "severity"
	response, err := client.GetApiMvnPackagesGroupIdArtifactIdVersionVulnerabilitiesWithResponse(
		ctx, groupID, artifactID, version,
		&fastenapi.GetApiMvnPackagesGroupIdArtifactIdVersionVulnerabilitiesParams{
			Attributes: &attributes,
		},
	)
	if err != nil {
		return nil, fmt.Errorf("error when calling FASTEN API: %w", err)
	}

	if response.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code %d: %w", response.StatusCode(), ErrUnexpectedAPIResponse)
	}

	if response.JSON200 == nil {
		return nil, ErrNoJSONBody
	}

	return *response.JSON200, nil
}

func GetVulnerabilityCallables(ctx context.Context, client *fastenapi.ClientWithResponses,
	vulnerabilityExternalID string,
) (map[string]string, error) {
	logrus.
		WithField("vulnerabilityExternalID", vulnerabilityExternalID).
		Trace("requesting vulnerable callables from FASTEN API")

	response, err := client.GetApiMvnVulnerabilitiesVulnerabilityExternalIdCallablesWithResponse(ctx, vulnerabilityExternalID)
	if err != nil {
		return nil, fmt.Errorf("error when calling FASTEN API: %w", err)
	}

	if response.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code %d: %w", response.StatusCode(), ErrUnexpectedAPIResponse)
	}

	if response.JSON200 == nil {
		return nil, ErrNoJSONBody
	}

	return *response.JSON200, nil
}

func GetCallables(ctx context.Context, client *fastenapi.ClientWithResponses,
	callableIds []int,
) (map[string]fastenapi.Callable, error) {
	logrus.
		WithField("callableIds", callableIds).
		Trace("requesting callable metadata from FASTEN API")

	response, err := client.PostApiMvnCallablesWithResponse(ctx, callableIds)
	if err != nil {
		return nil, fmt.Errorf("error when calling FASTEN API: %w", err)
	}

	if response.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code %d: %w", response.StatusCode(), ErrUnexpectedAPIResponse)
	}

	if response.JSON200 == nil {
		return nil, ErrNoJSONBody
	}

	return *response.JSON200, nil
}

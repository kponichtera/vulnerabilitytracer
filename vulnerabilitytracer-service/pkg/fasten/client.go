package fasten

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"vulnerabilitytracer-service/api/generated/fastenapi"
)

type PackageStatus int

const (
	PackageStatusProcessed PackageStatus = iota
	PackageStatusQueued    PackageStatus = iota
	PackageStatusUnknown   PackageStatus = iota
)

var ErrUnexpectedAPIResponse = errors.New("unexpected FASTEN API response")

func NewAPIClient(fastenAPIURL string) (*fastenapi.ClientWithResponses, error) {
	client, err := fastenapi.NewClientWithResponses(fastenAPIURL)
	if err != nil {
		return nil, fmt.Errorf("error when creating FASTEN API client: %w", err)
	}

	return client, nil
}

func GetPackageWithoutBody(
	ctx context.Context, client *fastenapi.ClientWithResponses,
	groupID string, artifactID string, version string,
) (PackageStatus, error) {
	response, err := client.GetApiMvnPackagesGroupIdArtifactIdVersionWithResponse(ctx, groupID, artifactID, version)
	if err != nil {
		return PackageStatusUnknown, fmt.Errorf("error when calling FASTEN API: %w", err)
	}

	switch response.StatusCode() {
	case http.StatusOK:
		return PackageStatusProcessed, nil
	case http.StatusCreated:
		return PackageStatusQueued, nil
	default:
		return PackageStatusUnknown, fmt.Errorf("unexpected status code %d: %w", response.StatusCode(), ErrUnexpectedAPIResponse)
	}
}

//func GetSimpleVulnerabilities(
//	ctx context.Context, client fastenclient.ClientInterface,
//	groupID string, artifactID string, version string,
//) ([]fastenclient.PackageVulnerabilityResponse, error) {
//	response, err := client.GetApiMvnPackagesGroupIdArtifactIdVersionVulnerabilities(ctx, groupID, artifactID, version)
//	if err != nil {
//		return nil, fmt.Errorf("error when calling FASTEN API: %w", err)
//	}
//
//	if response.StatusCode != http.StatusOK {
//		return nil, fmt.Errorf("unexpected status code %d: %w", response.StatusCode, ErrUnexpectedAPIResponse)
//	}
//
//	return response.Body, nil
//}

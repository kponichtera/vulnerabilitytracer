package fasten_test

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"io"
	"net/http"
	"strings"
	"testing"
	"vulnerabilitytracer-service/api/generated/fastenapi"
	"vulnerabilitytracer-service/pkg/fasten"
)

type mockHTTPClient struct {
	mock.Mock
}

func (m *mockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	args := m.Called(req)
	return args.Get(0).(*http.Response), args.Error(1)
}

func makeMockClient(t *testing.T) (*fastenapi.ClientWithResponses, *mockHTTPClient) {
	t.Helper()
	mockClient := new(mockHTTPClient)

	client, err := fastenapi.NewClientWithResponses("http://localhost:8080", func(client *fastenapi.Client) error {
		client.Client = mockClient
		return nil
	})
	if err != nil {
		t.Fatalf("error when creating FASTEN API client: %v", err)
	}

	return client, mockClient
}

func makeSimplePackageResponse(t *testing.T, statusCode int) http.Response {
	t.Helper()

	var (
		body        string
		contentType string
	)

	if statusCode == http.StatusOK {
		contentType = "application/json"
		body = `
		[{
			"id": 17,
			"package_id": 25,
			"version": "2.17.0",
			"cg_generator": "OPAL",
			"repository_base_url": "https://repo.maven.apache.org/maven2/",
			"metadata": {}
        }]
	`
	} else {
		contentType = "text/plain"
		body = "Plain text return body for non-200 responses"
	}

	return http.Response{
		StatusCode: statusCode,
		Header: map[string][]string{
			"Content-Type": {contentType},
		},
		Body: io.NopCloser(strings.NewReader(body)),
	}
}

func makeSimpleVulnerabilitiesResponse(t *testing.T, statusCode int) http.Response {
	t.Helper()

	body := `
		[
			{
				"statement": {
					"id": "CVE-2021-44832"
				},
				"external_id": "CVE-2021-44832",
				"id": 29961
			}
		]
	`

	return http.Response{
		StatusCode: statusCode,
		Header: map[string][]string{
			"Content-Type": {"application/json"},
		},
		Body: io.NopCloser(strings.NewReader(body)),
	}
}

func TestGetPackageWithoutBody(t *testing.T) {
	t.Parallel()

	type args struct {
		mockClientResponse http.Response
		mockClientError    error
	}

	tests := []struct {
		name    string
		args    args
		want    fasten.PackageStatus
		wantErr bool
	}{
		{
			name: "package request for processed package works",
			args: args{
				mockClientResponse: makeSimplePackageResponse(t, http.StatusOK),
				mockClientError:    nil,
			},
			want:    fasten.PackageStatusProcessed,
			wantErr: false,
		},
		{
			name: "package request for new package works",
			args: args{
				mockClientResponse: makeSimplePackageResponse(t, http.StatusCreated),
				mockClientError:    nil,
			},
			want:    fasten.PackageStatusQueued,
			wantErr: false,
		},
		{
			name: "unexpected response results in an error",
			args: args{
				mockClientResponse: makeSimplePackageResponse(t, http.StatusBadGateway),
				mockClientError:    nil,
			},
			want:    fasten.PackageStatusUnknown,
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Given
			client, mockClient := makeMockClient(t)

			// And
			mockClient.On("Do", mock.Anything).Return(&tt.args.mockClientResponse, tt.args.mockClientError)

			got, err := fasten.GetPackageWithoutBody(
				context.Background(), client,
				"org.latencyutils", "LatencyUtils", "1.2.3",
			)

			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.want, got)
			}
		})
	}
}

func TestGetSimpleVulnerabilities(t *testing.T) {
	t.Parallel()

	type args struct {
		mockClientResponse http.Response
		mockClientError    error
	}

	tests := []struct {
		name    string
		args    args
		want    []fastenapi.PackageVulnerabilityResponse
		wantErr bool
	}{
		{
			name: "package request for processed package works",
			args: args{
				mockClientResponse: makeSimpleVulnerabilitiesResponse(t, http.StatusOK),
				mockClientError:    nil,
			},
			want: []fastenapi.PackageVulnerabilityResponse{
				{
					ExternalId: "CVE-2021-44832",
					Id:         29961,
					Statement: map[string]interface{}{
						"id": "CVE-2021-44832",
					},
				},
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Given
			client, mockClient := makeMockClient(t)

			// And
			mockClient.On("Do", mock.Anything).Return(&tt.args.mockClientResponse, tt.args.mockClientError)

			got, err := fasten.GetSimpleVulnerabilities(
				context.Background(), client,
				"org.latencyutils", "LatencyUtils", "1.2.3",
			)

			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.want, got)
			}
		})
	}
}

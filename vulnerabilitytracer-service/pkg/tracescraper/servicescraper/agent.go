package servicescraper

import (
	"context"
	"errors"
	"sync"
	"time"

	"vulnerabilitytracer/pkg/tempo"

	"vulnerabilitytracer/api/generated/tempoquerierapi"
	"vulnerabilitytracer/pkg/tracescraper/runtime"

	"github.com/sirupsen/logrus"
)

var ErrParallelProcessingErrors = errors.New("incomplete results from parallel processing")

// queryTempoTraces returns a map of service name to traces that match the services and time range
func queryTempoTraces(ctx context.Context, runtimeCtx runtime.Context,
	serviceNames map[string][]string, from time.Time, to time.Time,
) (map[string][]tempoquerierapi.TraceQueryResponsePayload, error) {
	type serviceTrace struct {
		serviceName string
		trace       tempoquerierapi.TraceQueryResponsePayload
	}

	waitGroup := new(sync.WaitGroup)
	succChan := make(chan serviceTrace)
	errChan := make(chan error)

	for serviceName, traceIDs := range serviceNames {
		serviceName := serviceName

		for _, traceID := range traceIDs {
			traceID := traceID

			waitGroup.Add(1)

			go func() {
				defer waitGroup.Done()

				result, err := tempo.TraceQuery(ctx, runtimeCtx.TempoQuerierClient, traceID, from, to)
				if err != nil {
					errChan <- err
				} else {
					succChan <- serviceTrace{
						serviceName: serviceName,
						trace:       result,
					}
				}
			}()
		}
	}

	go func() {
		waitGroup.Wait()
		close(succChan)
		close(errChan)
	}()

	serviceTracesMap := make(map[string][]tempoquerierapi.TraceQueryResponsePayload)
	traceCount := 0
	errorCount := 0

L:
	for {
		select {
		case result, ok := <-succChan:
			if !ok {
				break L
			}
			serviceTracesMap[result.serviceName] = append(serviceTracesMap[result.serviceName], result.trace)
			traceCount++
		case err, ok := <-errChan:
			if !ok {
				break L
			}
			logrus.WithError(err).Error("failed to search for service traces")
			errorCount++
		}
	}

	logrus.
		WithField("serviceCount", len(serviceNames)).
		WithField("traceCount", traceCount).
		WithField("errorCount", errorCount).
		Info("finished querying for Tempo traces")

	if errorCount > 0 {
		return nil, ErrParallelProcessingErrors
	}

	return serviceTracesMap, nil
}

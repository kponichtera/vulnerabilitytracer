package server

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
	"vulnerabilitytracer-service/db/generated/queries"
	"vulnerabilitytracer-service/pkg/server/runtime"

	"vulnerabilitytracer-service/pkg/db"
	"vulnerabilitytracer-service/pkg/fasten"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/compress"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/sirupsen/logrus"

	"vulnerabilitytracer-service/api/generated/api"
)

func Run(port *int, prefork *bool, config *Config) error {
	app := fiber.New(fiber.Config{
		Prefork: *prefork,
	})

	app.Use(recover.New())
	app.Use(logger.New())
	app.Use(compress.New())

	// FASTEN API client
	fastenApiClient, err := fasten.NewAPIClient(config.Fasten.APIURL)
	if err != nil {
		return err
	}

	// Database
	dbPool, err := db.NewConnectionPool(config.Database.DatabaseUrl)
	if err != nil {
		return err
	}
	defer dbPool.Close()

	dbQueries := queries.New(dbPool)

	// Server interfaces
	strictServerInterface := &serverInterfaceImpl{
		runtime.Context{
			DBPool:          dbPool,
			DBQueries:       dbQueries,
			FastenAPIClient: fastenApiClient,
		},
	}

	strictHandler := api.NewStrictHandler(strictServerInterface, make([]api.StrictMiddlewareFunc, 0))

	api.RegisterHandlers(app, strictHandler)

	// Server listener goroutine
	go func() {
		if err := app.Listen(fmt.Sprintf(":%d", *port)); err != nil {
			logrus.WithError(err).Fatal("error in server listener goroutine")
		}
	}()

	// Shutdown procedure
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	received := <-shutdown
	logrus.Infof("%s signal received, shutting down", received.String())

	if err := app.ShutdownWithTimeout(10 * time.Second); err != nil {
		return fmt.Errorf("error when shutting down the server: %w", err)
	}

	logrus.Info("shutdown complete")

	return nil
}

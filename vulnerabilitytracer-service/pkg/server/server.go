package server

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/sirupsen/logrus"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/compress"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"

	"vulnerabilitytracer-service/api/generated/api"
)

func RunHTTPServer(port *int, prefork *bool) error {
	app := fiber.New(fiber.Config{
		Prefork: *prefork,
	})

	app.Use(recover.New())
	app.Use(logger.New())
	app.Use(compress.New())

	// TODO: Register database connection pool here and pass it to the server interfaces

	api.RegisterHandlers(app, &serverInterfaceImpl{})

	go func() {
		if err := app.Listen(fmt.Sprintf(":%d", *port)); err != nil {
			logrus.WithError(err).Fatal("Error in server listener goroutine")
		}
	}()

	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	received := <-shutdown
	logrus.Infof("%s signal received, shutting down", received.String())

	if err := app.ShutdownWithTimeout(10 * time.Second); err != nil {
		return err
	}

	logrus.Info("shutdown complete")
	return nil
}

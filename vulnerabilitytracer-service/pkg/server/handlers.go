package server

import (
	"context"

	"vulnerabilitytracer-service/pkg/callables"

	"vulnerabilitytracer-service/pkg/server/runtime"
	"vulnerabilitytracer-service/pkg/service"

	"github.com/sirupsen/logrus"

	"vulnerabilitytracer-service/api/generated/api"
)

type serverInterfaceImpl struct {
	runtime.Context
}

func (s serverInterfaceImpl) PostApiRegister(ctx context.Context, request api.PostApiRegisterRequestObject) (api.PostApiRegisterResponseObject, error) {
	existingServiceId, err := service.CheckServiceRegistration(ctx, s.Context, request.Body.ServiceName, request.Body.Dependencies)
	if err != nil {
		logrus.WithError(err).Error("error when registering service")
		return api.PostApiRegister500JSONResponse{Message: err.Error()}, nil
	}

	if existingServiceId == nil {
		// Service was not registered previously - register it and its dependencies
		serviceID, err := service.RegisterService(ctx, s.Context, request.Body.ServiceName, request.Body.Dependencies)
		if err != nil {
			logrus.WithError(err).Error("error when registering service")
			return api.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		dependencyIDs, err := service.RegisterServiceDependencies(ctx, s.Context, serviceID, request.Body.Dependencies)
		if err != nil {
			logrus.WithError(err).Error("error when registering service dependencies")
			return api.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		vulnerableCallables, err := service.RegisterVulnerabilitiesAndCallables(ctx, s.Context, dependencyIDs)
		if err != nil {
			return api.PostApiRegister500JSONResponse{Message: err.Error()}, nil
		}

		apiCallables := make([]api.JavaCallable, len(vulnerableCallables))
		for i, callable := range vulnerableCallables {
			apiCallables[i] = callables.ConvertToAPICallable(callable, api.NoneMitigationStrategy)
		}

		return api.PostApiRegister200JSONResponse{
			Callables: &apiCallables,
		}, nil
	}

	// Service was registered previously - return its vulnerable callables
	vulnerableCallables, err := service.QueryServiceVulnerableCallables(ctx, s.Context, *existingServiceId)
	if err != nil {
		return api.PostApiRegister500JSONResponse{Message: err.Error()}, nil
	}

	return api.PostApiRegister200JSONResponse{
		Callables: &vulnerableCallables,
	}, nil
}

func (s serverInterfaceImpl) GetLiveness(ctx context.Context, request api.GetLivenessRequestObject) (api.GetLivenessResponseObject, error) {
	err := s.DBPool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return api.GetLiveness200Response{}, nil
}

func (s serverInterfaceImpl) GetReadiness(ctx context.Context, request api.GetReadinessRequestObject) (api.GetReadinessResponseObject, error) {
	return api.GetReadiness200Response{}, nil
}

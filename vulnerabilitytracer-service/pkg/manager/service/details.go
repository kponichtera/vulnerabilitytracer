package service

import (
	"context"
	"fmt"
	"time"

	"vulnerabilitytracer/pkg/notifications"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/manager/runtime"

	"github.com/jackc/pgx/v5/pgtype"
)

func GetVulnerabilityServices(ctx context.Context, runtimeCtx runtime.Context,
	vulnerabilityExternalID string, from time.Time, to time.Time,
) ([]managerapi.Service, error) {
	vulnerabilityServices, err := runtimeCtx.DBQueries.GetVulnerabilityServices(ctx, queries.GetVulnerabilityServicesParams{
		VulnerabilityExternalID: vulnerabilityExternalID,
		FromTime: pgtype.Timestamptz{
			Time:  from,
			Valid: true,
		},
		ToTime: pgtype.Timestamptz{
			Time:  to,
			Valid: true,
		},
	})
	if err != nil {
		return nil, fmt.Errorf("error when querying for vulnerability services: %w", err)
	}

	vulnerabilityNotifications, err := runtimeCtx.DBQueries.GetVulnerabilityNotifications(ctx, vulnerabilityExternalID)
	if err != nil {
		return nil, fmt.Errorf("error when querying for vulnerability notifications: %w", err)
	}

	result := make([]managerapi.Service, 0)

	for _, row := range vulnerabilityServices {
		serviceVulnerabilityNotifications := make([]managerapi.Notification, 0)

		for _, notification := range vulnerabilityNotifications {
			if row.ServiceID == notification.ServiceID {
				serviceVulnerabilityNotifications = append(serviceVulnerabilityNotifications, managerapi.Notification{
					Id:       int(notification.ID),
					Message:  notifications.TemplateShortNotification(notification.Type),
					Severity: notifications.ConvertDatabaseEnumToManagerAPISeverity(notification.Severity),
				})
			}
		}

		result = append(result, managerapi.Service{
			ServiceName:             row.ServiceName,
			DependencyGroupId:       row.GroupID,
			DependencyArtifactId:    row.ArtifactID,
			DependencyVersion:       row.Version,
			EnabledMitigationsCount: int(row.MitigationCount),
			TriggerCount:            int(row.TriggerCount),
			Notifications:           serviceVulnerabilityNotifications,
		})
	}

	return result, nil
}

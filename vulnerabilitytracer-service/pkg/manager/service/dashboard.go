package service

import (
	"context"
	"fmt"
	"time"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/pkg/manager/runtime"
)

func GetDashboardVulnerabilities(ctx context.Context, runtimeCtx runtime.Context, from time.Time, to time.Time) ([]managerapi.Vulnerability, error) {
	// Get all relevant services
	services, err := runtimeCtx.DBQueries.GetLatestRegisteredServices(ctx)
	if err != nil {
		return nil, fmt.Errorf("error when fetching services from database: %w", err)
	}

	serviceNames := make([]string, len(services))
	for i, service := range services {
		serviceNames[i] = service.Name
	}

	// Search Tempo for traces of all the services
	// serviceTraceIDs, err := searchTempoTraces(ctx, runtimeCtx, serviceNames, from, to)

	// Query each trace
	//_, err = queryTempoTraces(ctx, runtimeCtx, serviceTraceIDs, from, to)

	// TODO: Aggregate data (extract vulnerability events, potentially mapping them to services)

	return nil, nil
}

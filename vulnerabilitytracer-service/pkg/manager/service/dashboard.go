package service

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5/pgtype"
	"time"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/vulnerabilities"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/pkg/manager/runtime"
)

func GetDashboardVulnerabilities(ctx context.Context, runtimeCtx runtime.Context,
	from time.Time, to time.Time,
) ([]managerapi.Vulnerability, error) {
	resultRows, err := runtimeCtx.DBQueries.GetDashboardVulnerabilities(ctx, queries.GetDashboardVulnerabilitiesParams{
		FromTime: pgtype.Timestamptz{
			Time:  from,
			Valid: true,
		},
		ToTime: pgtype.Timestamptz{
			Time:  to,
			Valid: true,
		},
	})
	if err != nil {
		return nil, fmt.Errorf("error when querying for dashboard vulnerabilities: %w", err)
	}

	result := make([]managerapi.Vulnerability, 0)
	for _, row := range resultRows {
		result = append(result, managerapi.Vulnerability{
			ExternalId:   row.ExternalID,
			Severity:     vulnerabilities.ConvertDatabaseEnumToManagerAPISeverity(row.Severity),
			TriggerCount: int(row.TriggerCount),
		})
	}

	return result, nil
}

package service

import (
	"context"
	"fmt"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/manager/runtime"
	"vulnerabilitytracer/pkg/notifications"

	"github.com/sirupsen/logrus"
)

func GetDashboardNotifications(ctx context.Context, runtimeCtx runtime.Context) ([]managerapi.Notification, error) {
	resultRows, err := runtimeCtx.DBQueries.GetDashboardNotifications(ctx)
	if err != nil {
		return nil, fmt.Errorf("error when querying for dashboard notifications: %w", err)
	}

	result := make([]managerapi.Notification, 0)
	for _, row := range resultRows {
		message, err := notifications.TemplateDashboardNotification(row.Type, row.ServiceName, row.VulnerabilityExternalID)
		if err != nil {
			return nil, fmt.Errorf("failed to template notifications: %w", err)
		}

		result = append(result, managerapi.Notification{
			Id:       int(row.ID),
			Message:  message,
			Severity: notifications.ConvertDatabaseEnumToManagerAPISeverity(row.Severity),
		})
	}

	return result, nil
}

func DismissNotification(ctx context.Context, runtimeCtx runtime.Context, notificationID int) error {
	err := runtimeCtx.DBQueries.DismissNotification(ctx, int64(notificationID))
	if err != nil {
		return fmt.Errorf("failed to mark notification as dismissed: %w", err)
	}

	logrus.
		WithField("notificationID", notificationID).
		Info("dismissed notification")

	return nil
}

func CreateNewMitigationAppliedNotification(ctx context.Context, runtimeCtx runtime.Context,
	serviceID int64, callableID int64,
) error {
	err := runtimeCtx.DBQueries.CreateNewMitigationAppliedNotification(ctx, queries.CreateNewMitigationAppliedNotificationParams{
		Severity:   queries.NotificationsNotificationSeverityINFO,
		ServiceID:  &serviceID,
		CallableID: callableID,
	})
	if err != nil {
		return fmt.Errorf("failed to add notification to the database: %w", err)
	}

	logrus.
		WithField("serviceID", serviceID).
		Info("added new mitigation notification for the service")

	return nil
}

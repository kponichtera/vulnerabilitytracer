package service

import (
	"context"
	"fmt"
	"time"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/db/generated/queries"
	"vulnerabilitytracer/pkg/manager/runtime"
	"vulnerabilitytracer/pkg/mitigationstrategies"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/sirupsen/logrus"
)

func GetServiceMitigations(ctx context.Context, runtimeCtx runtime.Context,
	vulnerabilityExternalID string, from time.Time, to time.Time,
) ([]managerapi.ServiceMitigation, error) {
	type serviceKey struct {
		ServiceId   int64
		ServiceName string
	}

	resultRows, err := runtimeCtx.DBQueries.GetServiceMitigations(ctx, queries.GetServiceMitigationsParams{
		VulnerabilityExternalID: vulnerabilityExternalID,
		FromTime: pgtype.Timestamptz{
			Time:  from,
			Valid: true,
		},
		ToTime: pgtype.Timestamptz{
			Time:  to,
			Valid: true,
		},
	})
	if err != nil {
		return nil, fmt.Errorf("error when querying for service mitigations: %w", err)
	}

	serviceCallablesMap := make(map[serviceKey][]managerapi.CallableMitigation)
	for _, row := range resultRows {
		key := serviceKey{
			ServiceId:   row.ServiceID,
			ServiceName: row.ServiceName,
		}
		serviceCallablesMap[key] = append(serviceCallablesMap[key], managerapi.CallableMitigation{
			CallableClassName:        row.CallableClassName,
			CallableId:               int(row.CallableID),
			CallableMethodName:       row.CallableMethodName,
			CallablePackageName:      row.CallablePackageName,
			DependencyArtifactId:     row.DependencyArtifactID,
			DependencyGroupId:        row.DependencyGroupID,
			DependencyVersion:        row.DependencyVersion,
			MitigationStrategy:       mitigationstrategies.ConvertDatabaseEnumToManagerAPIMitigationStrategy(&row.MitigationStrategy),
			MitigatedTriggerCount:    int(row.MitigatedTriggerCount),
			NonmitigatedTriggerCount: int(row.NonmitigatedTriggerCount),
			TotalTriggerCount:        int(row.MitigatedTriggerCount + row.NonmitigatedTriggerCount),
		})
	}

	result := make([]managerapi.ServiceMitigation, 0)

	for key, callables := range serviceCallablesMap {
		result = append(result, managerapi.ServiceMitigation{
			ServiceId:   int(key.ServiceId),
			ServiceName: key.ServiceName,
			Callables:   callables,
		})
	}

	return result, nil
}

func ApplyMitigationStrategy(ctx context.Context, runtimeCtx runtime.Context,
	serviceID int, callableID int, mitigation managerapi.MitigationStrategy,
) error {
	err := runtimeCtx.DBQueries.ApplyMitigationStrategy(ctx, queries.ApplyMitigationStrategyParams{
		ServiceID:  int64(serviceID),
		CallableID: int64(callableID),
		Strategy:   mitigationstrategies.ConvertManagerAPIMitigationStrategyToDatabaseEnum(&mitigation),
	})
	if err != nil {
		return fmt.Errorf("error when applying mitigation strategy: %w", err)
	}

	logrus.
		WithField("serviceID", serviceID).
		WithField("callableID", serviceID).
		WithField("mitigation", mitigation).
		Info("mitigation strategy applied")

	err = CreateNewMitigationAppliedNotification(ctx, runtimeCtx, int64(serviceID))
	if err != nil {
		return fmt.Errorf("error when creating new mitigation notification: %w", err)
	}

	return nil
}

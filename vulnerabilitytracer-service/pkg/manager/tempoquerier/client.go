package tempoquerier

import (
	"context"
	"errors"
	"fmt"
	"github.com/sirupsen/logrus"
	"net/http"
	"time"
	"vulnerabilitytracer/api/generated/tempoquerierapi"
)

var (
	ErrUnexpectedAPIResponse = errors.New("unexpected Tempo querier response")
)

func NewQuerierClient(tempoQuerierURL string) (*tempoquerierapi.ClientWithResponses, error) {
	client, err := tempoquerierapi.NewClientWithResponses(tempoQuerierURL)
	if err != nil {
		return nil, fmt.Errorf("error when creating Tempo API client: %w", err)
	}

	return client, nil
}

// TODO: IMPLEMENT EXPONENTIAL BACKOFF (check error response for "Code(429)")

func TraceSearch(ctx context.Context, client *tempoquerierapi.ClientWithResponses,
	serviceName string, from time.Time, to time.Time,
) ([]tempoquerierapi.TraceSearchResult, error) {
	fromUnix := int(from.Unix())
	toUnix := int(to.Unix())

	result, err := client.TraceSearchWithResponse(ctx, &tempoquerierapi.TraceSearchParams{
		Tags:  "service.name=" + serviceName,
		Start: &fromUnix,
		End:   &toUnix,
	})
	if err != nil {
		return nil, fmt.Errorf("error when searching for traces of service %s: %w", serviceName, err)
	} else if result.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code %d when searching for traces of service %s: '%s'", result.StatusCode(), serviceName, string(result.Body))
	}

	logTraceSearchMetrics(serviceName, result.JSON200.Metrics)

	return *result.JSON200.Traces, nil
}

// TODO: IMPLEMENT EXPONENTIAL BACKOFF

func TraceQuery(ctx context.Context, client *tempoquerierapi.ClientWithResponses,
	traceId string, from time.Time, to time.Time,
) (tempoquerierapi.TraceQueryResponsePayload, error) {
	fromUnix := int(from.Unix())
	toUnix := int(to.Unix())

	result, err := client.TraceQueryWithResponse(ctx, traceId, &tempoquerierapi.TraceQueryParams{
		Start: &fromUnix,
		End:   &toUnix,
	})
	if err != nil {
		return tempoquerierapi.TraceQueryResponsePayload{},
			fmt.Errorf("error when querying for trace with ID %s: %w", traceId, err)
	} else if result.StatusCode() != http.StatusOK {
		return tempoquerierapi.TraceQueryResponsePayload{},
			fmt.Errorf("unexpected status code %d when querying for trace with ID %s: '%s'", result.StatusCode(), traceId, string(result.Body))
	}

	return *result.JSON200, nil
}

func logTraceSearchMetrics(serviceName string, metrics *tempoquerierapi.TraceSearchMetrics) {
	logEntry := logrus.WithField("serviceName", serviceName)

	if metrics.InspectedTraces != nil {
		logEntry.WithField("inspectedTraces", *metrics.InspectedTraces)
	}
	if metrics.InspectedBytes != nil {
		logEntry.WithField("inspectedBytes", *metrics.InspectedBytes)
	}
	if metrics.TotalJobs != nil {
		logEntry.WithField("totalJobs", *metrics.TotalJobs)
	}
	if metrics.CompletedJobs != nil {
		logEntry.WithField("completedJobs", *metrics.CompletedJobs)
	}

	logEntry.Debug("trace search returned metrics")
}

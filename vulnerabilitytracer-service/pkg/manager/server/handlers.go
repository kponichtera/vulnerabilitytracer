package server

import (
	"context"

	"vulnerabilitytracer/api/generated/managerapi"
	"vulnerabilitytracer/pkg/manager/runtime"
	"vulnerabilitytracer/pkg/manager/service"
)

type serverInterfaceImpl struct {
	runtime.Context
}

func (s serverInterfaceImpl) GetImpactGraph(ctx context.Context, request managerapi.GetImpactGraphRequestObject) (managerapi.GetImpactGraphResponseObject, error) {
	result, err := service.GetImpactGraph(ctx, s.Context, request.Body.VulnerabilityExternalId, request.Body.FromDateTime, request.Body.ToDateTime)
	if err != nil {
		return managerapi.GetImpactGraph500JSONResponse{Message: err.Error()}, nil
	}
	return managerapi.GetImpactGraph200JSONResponse{
		Edges: result.Edges,
		Nodes: result.Nodes,
	}, nil
}

func (s serverInterfaceImpl) GetVulnerabilityServices(ctx context.Context, request managerapi.GetVulnerabilityServicesRequestObject,
) (managerapi.GetVulnerabilityServicesResponseObject, error) {
	result, err := service.GetVulnerabilityServices(ctx, s.Context, request.Body.VulnerabilityExternalId, request.Body.FromDateTime, request.Body.ToDateTime)
	if err != nil {
		return managerapi.GetVulnerabilityServices500JSONResponse{Message: err.Error()}, nil
	}
	return managerapi.GetVulnerabilityServices200JSONResponse{Services: result}, nil
}

func (s serverInterfaceImpl) GetDashboardVulnerabilities(ctx context.Context, request managerapi.GetDashboardVulnerabilitiesRequestObject,
) (managerapi.GetDashboardVulnerabilitiesResponseObject, error) {
	result, err := service.GetDashboardVulnerabilities(ctx, s.Context, request.Body.FromDateTime, request.Body.ToDateTime)
	if err != nil {
		return managerapi.GetDashboardVulnerabilities500JSONResponse{Message: err.Error()}, nil
	}
	return managerapi.GetDashboardVulnerabilities200JSONResponse{Vulnerabilities: result}, nil
}

func (s serverInterfaceImpl) GetServiceMitigations(ctx context.Context, request managerapi.GetServiceMitigationsRequestObject,
) (managerapi.GetServiceMitigationsResponseObject, error) {
	result, err := service.GetServiceMitigations(ctx, s.Context, request.Body.VulnerabilityExternalId, request.Body.FromDateTime, request.Body.ToDateTime)
	if err != nil {
		return managerapi.GetServiceMitigations500JSONResponse{Message: err.Error()}, nil
	}
	return managerapi.GetServiceMitigations200JSONResponse{Services: result}, nil
}

func (s serverInterfaceImpl) ApplyMitigationStrategy(ctx context.Context, request managerapi.ApplyMitigationStrategyRequestObject,
) (managerapi.ApplyMitigationStrategyResponseObject, error) {
	err := service.ApplyMitigationStrategy(ctx, s.Context, request.Body.ServiceId, request.Body.CallableId, request.Body.MitigationStrategy)
	if err != nil {
		return managerapi.ApplyMitigationStrategy500JSONResponse{Message: err.Error()}, nil
	}
	return managerapi.ApplyMitigationStrategy200Response{}, nil
}

func (s serverInterfaceImpl) GetLiveness(ctx context.Context, request managerapi.GetLivenessRequestObject,
) (managerapi.GetLivenessResponseObject, error) {
	return managerapi.GetLiveness200Response{}, nil
}

func (s serverInterfaceImpl) GetReadiness(ctx context.Context, request managerapi.GetReadinessRequestObject,
) (managerapi.GetReadinessResponseObject, error) {
	err := s.DBPool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return managerapi.GetReadiness200Response{}, nil
}

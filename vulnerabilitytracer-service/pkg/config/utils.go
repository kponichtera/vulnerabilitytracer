package config

import (
	"errors"
	"fmt"
	"log"
	"os"

	"github.com/sirupsen/logrus"

	"github.com/ilyakaznacheev/cleanenv"
)

func PrintHelpAndExit(config interface{}) {
	text, err := cleanenv.GetDescription(&config, nil)
	if err != nil {
		log.Fatalf("Error when reading configuration schema: %v", err)
	}
	fmt.Println(text)
	os.Exit(2)
}

func Read(configFilename string, config interface{}) {
	_, err := os.Stat(configFilename)

	switch {
	case err == nil:
		readFromFile(configFilename, config)
	case errors.Is(err, os.ErrNotExist):
		readFromEnv(config)
	default:
		logrus.WithError(err).Fatal("Error when reading configuration")
	}
}

func readFromFile(configFilename string, config interface{}) {
	err := cleanenv.ReadConfig(configFilename, config)
	if err != nil {
		logrus.WithError(err).Fatalf("Error when reading configuration from file %s", configFilename)
	}
}

func readFromEnv(config interface{}) {
	err := cleanenv.ReadEnv(config)
	if err != nil {
		logrus.WithError(err).Fatal("Error when reading configuration from environment variables")
	}
}

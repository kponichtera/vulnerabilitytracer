package tracegraph_test

import (
	"testing"

	"vulnerabilitytracer/pkg/tracegraph"

	"github.com/stretchr/testify/require"
)

func TestFindingImpactGraphRoot(t *testing.T) {
	t.Parallel()

	correctGraph, correctRoot := buildCorrectTraceGraph()
	cyclicGraph, _ := buildCycleTraceGraph()

	tests := []struct {
		name           string
		graph          tracegraph.Graph
		expectedRootID tracegraph.NodeID
		expectedError  error
	}{
		{
			name:           "finding root in correct impact graph works",
			graph:          correctGraph,
			expectedRootID: correctRoot,
			expectedError:  nil,
		},
		{
			name:           "finding root in cycle impact graph returns error",
			graph:          cyclicGraph,
			expectedRootID: "",
			expectedError:  tracegraph.ErrGraphNotRooted,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When
			root, err := tracegraph.FindRoot(tt.graph)

			// Then
			if tt.expectedError != nil {
				require.Error(t, tt.expectedError)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expectedRootID, *root)
			}
		})
	}
}

func TestCheckingImpactGraphEquality(t *testing.T) {
	graph1, _ := buildCorrectTraceGraph()
	graph2, _ := buildCycleTraceGraph()

	tests := []struct {
		name           string
		graph1         tracegraph.Graph
		graph2         tracegraph.Graph
		expectedResult bool
		expectedError  error
	}{
		{
			name:           "checking equality of two equal graphs works",
			graph1:         graph1,
			graph2:         graph1,
			expectedResult: true,
			expectedError:  nil,
		},
		{
			name:           "checking equality of two different graphs works",
			graph1:         graph1,
			graph2:         graph2,
			expectedResult: false,
			expectedError:  nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When
			result, err := tracegraph.Equal(tt.graph1, tt.graph2)

			// Then
			if tt.expectedError != nil {
				require.Error(t, tt.expectedError)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expectedResult, result)
			}
		})
	}
}

func buildCorrectTraceGraph() (tracegraph.Graph, tracegraph.NodeID) {
	resultGraph := tracegraph.New()
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "1",
		ServiceName: "service-1",
	})
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "2",
		ServiceName: "service-2",
	})
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "3",
		ServiceName: "service-3",
	})
	_ = resultGraph.AddEdge("1", "2")
	_ = resultGraph.AddEdge("2", "3")

	return resultGraph, "1"
}

func buildCycleTraceGraph() (tracegraph.Graph, tracegraph.NodeID) {
	resultGraph := tracegraph.New()
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "1",
		ServiceName: "service-1",
	})
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "2",
		ServiceName: "service-2",
	})
	_ = resultGraph.AddVertex(tracegraph.Node{
		ID:          "3",
		ServiceName: "service-3",
	})
	_ = resultGraph.AddEdge("1", "2")
	_ = resultGraph.AddEdge("2", "3")
	_ = resultGraph.AddEdge("3", "1")

	return resultGraph, "1"
}

package tracegraph

import (
	"errors"
	"fmt"

	"github.com/dominikbraun/graph"
)

var (
	ErrGraphNotRooted         = errors.New("graph is not rooted")
	ErrRootedGraphWithoutRoot = errors.New("could not find a root node in the graph")
)

func FindRoot[K comparable, T any](graph graph.Graph[K, T]) (*K, error) {
	if !graph.Traits().IsRooted {
		return nil, ErrGraphNotRooted
	}

	predecessorMap, err := graph.PredecessorMap()
	if err != nil {
		return nil, fmt.Errorf("failed to get predecessor map: %w", err)
	}

	var root *K

	for nodeID, predecessors := range predecessorMap {
		if len(predecessors) == 0 {
			root = &nodeID

			break
		}
	}

	if root == nil {
		return nil, ErrRootedGraphWithoutRoot
	}

	return root, nil
}

func Equal(graph1 Graph, graph2 Graph) (bool, error) {
	// Graphs are equal if they have the same vertices and edges

	map1, err := graph1.AdjacencyMap()
	if err != nil {
		return false, fmt.Errorf("failed to get adjacency map for the first graph: %w", err)
	}

	map2, err := graph2.AdjacencyMap()
	if err != nil {
		return false, fmt.Errorf("failed to get adjacency map for the second graph: %w", err)
	}

	for vertex1ID, edges1 := range map1 {
		edges2, ok := map2[vertex1ID]
		if !ok {
			// Second graph does not have the same vertex
			return false, nil
		}

		if len(edges1) != len(edges2) {
			// Vertex in the second graph has different amount of edges
			return false, nil
		}

		for successorVertexID1 := range edges1 {
			_, ok := edges2[successorVertexID1]
			if !ok {
				// Outgoing edges in the second graph are different
				return false, nil
			}
		}
	}

	return true, nil
}

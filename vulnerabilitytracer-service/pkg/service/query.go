package service

import (
	"context"
	"fmt"
	"vulnerabilitytracer/internal/runtime"

	"vulnerabilitytracer/api/generated/api"
	"vulnerabilitytracer/pkg/services"
	"vulnerabilitytracer/pkg/vulnerabilities"

	"github.com/sirupsen/logrus"
)

func QueryServiceVulnerableCallables(ctx context.Context, runtimeCtx runtime.Context,
	serviceID int64,
) ([]api.JavaCallable, error) {
	// Fetch vulnerable callables for the service
	callableQueryResult, err := runtimeCtx.DBQueries.GetServiceVulnerableCallables(ctx, serviceID)
	if err != nil {
		logrus.
			WithError(err).
			WithField("serviceID", serviceID).
			Error("error when fetching vulnerable callables from database")

		return nil, fmt.Errorf("error when fetching vulnerable callables from database: %w", err)
	}

	// Fetch vulnerability metadata for these callables
	callableIds := make([]int64, len(callableQueryResult))
	for i, row := range callableQueryResult {
		callableIds[i] = row.ID
	}

	vulnerabilityQueryResult, err := runtimeCtx.DBQueries.GetCallableVulnerabilities(ctx, callableIds)
	if err != nil {
		logrus.
			WithError(err).
			WithField("serviceID", serviceID).
			Error("error when fetching callables vulnerabilities from database")

		return nil, fmt.Errorf("error when fetching callables vulnerabilities from database: %w", err)
	}

	apiCallables := make([]api.JavaCallable, len(callableQueryResult))

	for i, row := range callableQueryResult {
		apiVulnerabilities := make([]api.VulnerabilityMetadata, 0)

		for _, vulnerabilityRow := range vulnerabilityQueryResult {
			if row.ID == vulnerabilityRow.CallableID {
				apiVulnerabilities = append(apiVulnerabilities, api.VulnerabilityMetadata{
					ExternalId: vulnerabilityRow.VulnerabilityExternalID,
					Severity:   vulnerabilities.ConvertStringToAPISeverity(vulnerabilityRow.VulnerabilitySeverity),
				})
			}
		}

		apiCallables[i] = api.JavaCallable{
			ClassName:          row.ClassName,
			MethodName:         row.MethodName,
			PackageName:        row.PackageName,
			MitigationStrategy: services.ConvertToAPIMitigationStrategy(row.MitigationStrategy),
			Vulnerabilities:    apiVulnerabilities,
		}
	}

	logrus.
		WithField("serviceID", serviceID).
		WithField("callableCount", len(apiCallables)).
		Info("fetched vulnerable callables from database")

	return apiCallables, nil
}

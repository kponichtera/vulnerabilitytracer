package service

import (
	"context"
	"fmt"

	"vulnerabilitytracer/api/generated/api"
	"vulnerabilitytracer/pkg/server/runtime"
	"vulnerabilitytracer/pkg/services"
	"vulnerabilitytracer/pkg/vulnerabilities"

	"github.com/sirupsen/logrus"
)

func QueryServiceVulnerableCallables(ctx context.Context, runtimeCtx runtime.Context,
	serviceID int64,
) ([]api.JavaCallable, error) {
	queryResult, err := runtimeCtx.DBQueries.GetServiceVulnerableCallables(ctx, serviceID)
	if err != nil {
		logrus.
			WithError(err).
			WithField("serviceID", serviceID).
			Error("error when fetching vulnerable callables from database")

		return nil, fmt.Errorf("error when fetching vulnerable callables from database: %w", err)
	}

	apiCallables := make([]api.JavaCallable, len(queryResult))
	for i, row := range queryResult {
		apiCallables[i] = api.JavaCallable{
			ClassName:          row.ClassName,
			MethodName:         row.MethodName,
			PackageName:        row.PackageName,
			MitigationStrategy: services.ConvertToAPIMitigationStrategy(row.MitigationStrategy.String),
			Vulnerability: api.VulnerabilityMetadata{
				ExternalId: row.VulnerabilityExternalID,
				Severity:   vulnerabilities.ConvertStringToAPISeverity(row.VulnerabilitySeverity),
			},
		}
	}

	logrus.
		WithField("serviceID", serviceID).
		WithField("callableCount", len(apiCallables)).
		Info("fetched vulnerable callables from database")

	return apiCallables, nil
}

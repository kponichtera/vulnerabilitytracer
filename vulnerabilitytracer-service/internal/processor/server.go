package processor

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"vulnerabilitytracer/api/generated/api"
	"vulnerabilitytracer/api/generated/processorapi"
	"vulnerabilitytracer/internal/runtime"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/sirupsen/logrus"
)

func RunServer(port *int, runtimeCtx runtime.Context) error {
	app := fiber.New()

	app.Use(recover.New())
	app.Use(logger.New())

	strictServerInterface := &serverInterfaceImpl{
		runtimeCtx,
	}

	strictHandler := processorapi.NewStrictHandler(strictServerInterface, make([]processorapi.StrictMiddlewareFunc, 0))

	processorapi.RegisterHandlers(app, strictHandler)

	// Server listener goroutine
	go func() {
		if err := app.Listen(fmt.Sprintf(":%d", *port)); err != nil {
			logrus.WithError(err).Fatal("error in server listener goroutine")
		}
	}()

	// Shutdown procedure
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	received := <-shutdown
	logrus.Infof("%s signal received, shutting down", received.String())

	if err := app.ShutdownWithTimeout(10 * time.Second); err != nil {
		return fmt.Errorf("error when shutting down the server: %w", err)
	}

	logrus.Info("server shutdown complete")

	return nil
}

type serverInterfaceImpl struct {
	runtime.Context
}

func (s serverInterfaceImpl) GetLiveness(ctx context.Context, request processorapi.GetLivenessRequestObject) (processorapi.GetLivenessResponseObject, error) {
	err := s.DBPool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return api.GetLiveness200Response{}, nil
}

func (s serverInterfaceImpl) GetReadiness(ctx context.Context, request processorapi.GetReadinessRequestObject) (processorapi.GetReadinessResponseObject, error) {
	return api.GetReadiness200Response{}, nil
}

package processor

import (
	"context"
	"fmt"
	"time"

	"vulnerabilitytracer/internal/runtime"

	"github.com/go-co-op/gocron"
	"github.com/sirupsen/logrus"
)

func RunScheduler[T any](runtimeCtx runtime.Context, processorConfig Config, jobConfig T, processorJobFunc JobFunc) (*gocron.Scheduler, error) {
	scheduler := gocron.NewScheduler(time.UTC).
		SingletonMode().
		Every(processorConfig.JobDelay)

	_, err := scheduler.DoWithJobDetails(jobFunc, runtimeCtx, processorConfig, jobConfig, processorJobFunc)
	if err != nil {
		return nil, fmt.Errorf("error when scheduling job: %w", err)
	}

	scheduler.StartAsync()

	return scheduler, nil
}

func jobFunc(runtimeCtx runtime.Context, processorConfig Config, jobConfig interface{}, processorJobFunc JobFunc, job gocron.Job) {
	ctx, cancel := context.WithTimeout(job.Context(), processorConfig.JobTimeout)
	defer cancel()

	ctx = writeJobConfig(ctx, jobConfig)

	logrus.
		WithField("runCount", job.RunCount()).
		Info("Starting the processor job")

	err := processorJobFunc(ctx, runtimeCtx)
	if err != nil {
		logrus.WithError(err).Error("error when running processor job")
	}
}

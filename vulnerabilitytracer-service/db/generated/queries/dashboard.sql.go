// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: dashboard.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDashboardVulnerabilities = `-- name: GetDashboardVulnerabilities :many
SELECT v.external_id, v.severity, COUNT(e.id) AS trigger_count
FROM vulnerabilities.vulnerabilities v
LEFT JOIN trace.events e ON v.external_id = e.vulnerability_external_id
AND e.time > $1 AND e.time < $2
GROUP BY v.external_id, v.severity
ORDER BY v.severity DESC, trigger_count DESC
`

type GetDashboardVulnerabilitiesParams struct {
	FromTime pgtype.Timestamptz
	ToTime   pgtype.Timestamptz
}

type GetDashboardVulnerabilitiesRow struct {
	ExternalID   string
	Severity     VulnerabilitiesSeverity
	TriggerCount int64
}

func (q *Queries) GetDashboardVulnerabilities(ctx context.Context, arg GetDashboardVulnerabilitiesParams) ([]GetDashboardVulnerabilitiesRow, error) {
	rows, err := q.db.Query(ctx, getDashboardVulnerabilities, arg.FromTime, arg.ToTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardVulnerabilitiesRow
	for rows.Next() {
		var i GetDashboardVulnerabilitiesRow
		if err := rows.Scan(&i.ExternalID, &i.Severity, &i.TriggerCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

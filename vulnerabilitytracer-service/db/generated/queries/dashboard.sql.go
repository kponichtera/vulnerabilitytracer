// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: dashboard.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDashboardVulnerabilities = `-- name: GetDashboardVulnerabilities :many
SELECT v.external_id, v.severity, COUNT(e.id) AS trigger_count
FROM vulnerabilities.vulnerabilities v
         LEFT JOIN trace.events e ON v.external_id = e.vulnerability_external_id
    AND e.time > $1 AND e.time < $2
GROUP BY v.external_id, v.severity
ORDER BY v.severity DESC, trigger_count DESC
`

type GetDashboardVulnerabilitiesParams struct {
	FromTime pgtype.Timestamptz
	ToTime   pgtype.Timestamptz
}

type GetDashboardVulnerabilitiesRow struct {
	ExternalID   string
	Severity     VulnerabilitiesSeverity
	TriggerCount int64
}

func (q *Queries) GetDashboardVulnerabilities(ctx context.Context, arg GetDashboardVulnerabilitiesParams) ([]GetDashboardVulnerabilitiesRow, error) {
	rows, err := q.db.Query(ctx, getDashboardVulnerabilities, arg.FromTime, arg.ToTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardVulnerabilitiesRow
	for rows.Next() {
		var i GetDashboardVulnerabilitiesRow
		if err := rows.Scan(&i.ExternalID, &i.Severity, &i.TriggerCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerabilityServices = `-- name: GetVulnerabilityServices :many
WITH service_dependencies AS (SELECT s.id AS service_id, s.name AS service_name, d.group_id, d.artifact_id, d.version
                              FROM vulnerabilities.vulnerabilities v
                                       JOIN java.dependencies_vulnerabilities dv ON v.id = dv.vulnerability_id
                                       JOIN java.dependencies d ON dv.dependency_id = d.id
                                       JOIN service.service_dependencies sd ON d.id = sd.dependency_id
                                       JOIN service.services s ON sd.service_id = s.id
                              WHERE v.external_id = $1),
     enabled_mitigations AS (SELECT sd.service_id, COUNT(ms.service_id) AS mitigation_count
                             FROM service_dependencies sd
                                      LEFT JOIN service.mitigation_strategies ms ON sd.service_id = ms.service_id
                                 AND ms.strategy != 'NONE'
                             GROUP BY sd.service_id),
     trigger_count AS (SELECT sd.service_id, COUNT(e.id) AS trigger_count
                       FROM service_dependencies sd
                                LEFT JOIN trace.traces t ON sd.service_id = t.service_id
                           AND scraped IS TRUE
                                LEFT JOIN trace.events e ON t.id = e.trace_id
                           AND e.vulnerability_external_id = $1
                       WHERE e.time > $2
                         AND e.time < $3
                       GROUP BY sd.service_id)
SELECT sd.service_id,
       sd.service_name,
       sd.group_id,
       sd.artifact_id,
       sd.version,
       em.mitigation_count,
       tc.trigger_count
FROM service_dependencies sd
         JOIN enabled_mitigations em ON sd.service_id = em.service_id
         JOIN trigger_count tc ON sd.service_id = tc.service_id
`

type GetVulnerabilityServicesParams struct {
	VulnerabilityExternalID string
	FromTime                pgtype.Timestamptz
	ToTime                  pgtype.Timestamptz
}

type GetVulnerabilityServicesRow struct {
	ServiceID       int64
	ServiceName     string
	GroupID         string
	ArtifactID      string
	Version         string
	MitigationCount int64
	TriggerCount    int64
}

func (q *Queries) GetVulnerabilityServices(ctx context.Context, arg GetVulnerabilityServicesParams) ([]GetVulnerabilityServicesRow, error) {
	rows, err := q.db.Query(ctx, getVulnerabilityServices, arg.VulnerabilityExternalID, arg.FromTime, arg.ToTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVulnerabilityServicesRow
	for rows.Next() {
		var i GetVulnerabilityServicesRow
		if err := rows.Scan(
			&i.ServiceID,
			&i.ServiceName,
			&i.GroupID,
			&i.ArtifactID,
			&i.Version,
			&i.MitigationCount,
			&i.TriggerCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package queries

import (
	"context"
)

// iteratorForInsertTraceGraphEdges implements pgx.CopyFromSource.
type iteratorForInsertTraceGraphEdges struct {
	rows                 []InsertTraceGraphEdgesParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTraceGraphEdges) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTraceGraphEdges) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SourceTraceID,
		r.rows[0].SourceSpanID,
		r.rows[0].TargetTraceID,
		r.rows[0].TargetSpanID,
	}, nil
}

func (r iteratorForInsertTraceGraphEdges) Err() error {
	return nil
}

func (q *Queries) InsertTraceGraphEdges(ctx context.Context, arg []InsertTraceGraphEdgesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"trace", "trace_graph_edges"}, []string{"source_trace_id", "source_span_id", "target_trace_id", "target_span_id"}, &iteratorForInsertTraceGraphEdges{rows: arg})
}

// iteratorForInsertTraceGraphNodes implements pgx.CopyFromSource.
type iteratorForInsertTraceGraphNodes struct {
	rows                 []InsertTraceGraphNodesParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTraceGraphNodes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTraceGraphNodes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TraceID,
		r.rows[0].SpanID,
		r.rows[0].ServiceName,
	}, nil
}

func (r iteratorForInsertTraceGraphNodes) Err() error {
	return nil
}

func (q *Queries) InsertTraceGraphNodes(ctx context.Context, arg []InsertTraceGraphNodesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"trace", "trace_graph_nodes"}, []string{"trace_id", "span_id", "service_name"}, &iteratorForInsertTraceGraphNodes{rows: arg})
}

// iteratorForRegisterDependencyVulnerabilities implements pgx.CopyFromSource.
type iteratorForRegisterDependencyVulnerabilities struct {
	rows                 []RegisterDependencyVulnerabilitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForRegisterDependencyVulnerabilities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRegisterDependencyVulnerabilities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].DependencyID,
		r.rows[0].VulnerabilityID,
	}, nil
}

func (r iteratorForRegisterDependencyVulnerabilities) Err() error {
	return nil
}

func (q *Queries) RegisterDependencyVulnerabilities(ctx context.Context, arg []RegisterDependencyVulnerabilitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"java", "dependencies_vulnerabilities"}, []string{"dependency_id", "vulnerability_id"}, &iteratorForRegisterDependencyVulnerabilities{rows: arg})
}

// iteratorForRegisterServiceDependencies implements pgx.CopyFromSource.
type iteratorForRegisterServiceDependencies struct {
	rows                 []RegisterServiceDependenciesParams
	skippedFirstNextCall bool
}

func (r *iteratorForRegisterServiceDependencies) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRegisterServiceDependencies) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ServiceID,
		r.rows[0].DependencyID,
	}, nil
}

func (r iteratorForRegisterServiceDependencies) Err() error {
	return nil
}

func (q *Queries) RegisterServiceDependencies(ctx context.Context, arg []RegisterServiceDependenciesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"service", "service_dependencies"}, []string{"service_id", "dependency_id"}, &iteratorForRegisterServiceDependencies{rows: arg})
}

// iteratorForRegisterVulnerabilityCallableRelations implements pgx.CopyFromSource.
type iteratorForRegisterVulnerabilityCallableRelations struct {
	rows                 []RegisterVulnerabilityCallableRelationsParams
	skippedFirstNextCall bool
}

func (r *iteratorForRegisterVulnerabilityCallableRelations) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForRegisterVulnerabilityCallableRelations) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CallableID,
		r.rows[0].VulnerabilityID,
	}, nil
}

func (r iteratorForRegisterVulnerabilityCallableRelations) Err() error {
	return nil
}

func (q *Queries) RegisterVulnerabilityCallableRelations(ctx context.Context, arg []RegisterVulnerabilityCallableRelationsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"java", "callables_vulnerabilities"}, []string{"callable_id", "vulnerability_id"}, &iteratorForRegisterVulnerabilityCallableRelations{rows: arg})
}

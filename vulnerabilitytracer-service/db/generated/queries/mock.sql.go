// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: mock.sql

package queries

import (
	"context"
)

const createMockCallable = `-- name: CreateMockCallable :one
WITH inserted_callable AS (
    INSERT INTO java.callables (fasten_id, package_name, class_name, method_name)
        VALUES ($1, $2, $3, $4)
        RETURNING id
), vulnerabilities AS (
    SELECT id FROM vulnerabilities.vulnerabilities WHERE external_id = ANY($5::varchar[])
)
INSERT INTO java.callables_vulnerabilities (callable_id, vulnerability_id)
SELECT inserted_callable.id, vulnerabilities.id
FROM inserted_callable, vulnerabilities
RETURNING callable_id
`

type CreateMockCallableParams struct {
	FastenID                 string
	PackageName              string
	ClassName                string
	MethodName               string
	VulnerabilityExternalIds []string
}

func (q *Queries) CreateMockCallable(ctx context.Context, arg CreateMockCallableParams) (int64, error) {
	row := q.db.QueryRow(ctx, createMockCallable,
		arg.FastenID,
		arg.PackageName,
		arg.ClassName,
		arg.MethodName,
		arg.VulnerabilityExternalIds,
	)
	var callable_id int64
	err := row.Scan(&callable_id)
	return callable_id, err
}

const createMockMitigationStrategy = `-- name: CreateMockMitigationStrategy :exec
WITH service AS (
    SELECT id FROM service.services WHERE name = $1
)
INSERT INTO service.mitigation_strategies (service_id, callable_id, strategy)
SELECT service.id, $2, $3
FROM service
`

type CreateMockMitigationStrategyParams struct {
	Name       string
	CallableID int64
	Strategy   string
}

func (q *Queries) CreateMockMitigationStrategy(ctx context.Context, arg CreateMockMitigationStrategyParams) error {
	_, err := q.db.Exec(ctx, createMockMitigationStrategy, arg.Name, arg.CallableID, arg.Strategy)
	return err
}

const createMockVulnerability = `-- name: CreateMockVulnerability :exec
WITH inserted_vulnerability AS (
    INSERT INTO vulnerabilities.vulnerabilities (external_id, severity)
        VALUES ($1, $2)
        RETURNING id
), selected_dependency AS (
    SELECT id FROM java.dependencies WHERE group_id = $3 AND artifact_id = $4 AND version = $5
)
INSERT INTO java.dependencies_vulnerabilities (vulnerability_id, dependency_id)
SELECT inserted_vulnerability.id, selected_dependency.id
FROM inserted_vulnerability, selected_dependency
`

type CreateMockVulnerabilityParams struct {
	ExternalID string
	Severity   string
	GroupID    string
	ArtifactID string
	Version    string
}

func (q *Queries) CreateMockVulnerability(ctx context.Context, arg CreateMockVulnerabilityParams) error {
	_, err := q.db.Exec(ctx, createMockVulnerability,
		arg.ExternalID,
		arg.Severity,
		arg.GroupID,
		arg.ArtifactID,
		arg.Version,
	)
	return err
}

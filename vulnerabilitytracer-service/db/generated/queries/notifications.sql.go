// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: notifications.sql

package queries

import (
	"context"
)

const createNewMitigationAppliedNotification = `-- name: CreateNewMitigationAppliedNotification :exec
INSERT INTO notifications.notifications (type, severity, service_id)
VALUES ('MITIGATION_APPLIED', $1, $2)
`

type CreateNewMitigationAppliedNotificationParams struct {
	Severity  NotificationsNotificationSeverity
	ServiceID *int64
}

func (q *Queries) CreateNewMitigationAppliedNotification(ctx context.Context, arg CreateNewMitigationAppliedNotificationParams) error {
	_, err := q.db.Exec(ctx, createNewMitigationAppliedNotification, arg.Severity, arg.ServiceID)
	return err
}

const createNewVulnerabilityNotification = `-- name: CreateNewVulnerabilityNotification :exec
INSERT INTO notifications.notifications (type, severity, service_id, vulnerability_id)
SELECT 'NEW_VULNERABILITY_IN_SERVICE', $1, $2, v.id
FROM vulnerabilities.vulnerabilities v
WHERE v.external_id = $3
`

type CreateNewVulnerabilityNotificationParams struct {
	Severity                NotificationsNotificationSeverity
	ServiceID               *int64
	VulnerabilityExternalID string
}

func (q *Queries) CreateNewVulnerabilityNotification(ctx context.Context, arg CreateNewVulnerabilityNotificationParams) error {
	_, err := q.db.Exec(ctx, createNewVulnerabilityNotification, arg.Severity, arg.ServiceID, arg.VulnerabilityExternalID)
	return err
}

const dismissNotification = `-- name: DismissNotification :exec
UPDATE notifications.notifications
SET dismissed = TRUE
WHERE id = $1
`

func (q *Queries) DismissNotification(ctx context.Context, notificationID int64) error {
	_, err := q.db.Exec(ctx, dismissNotification, notificationID)
	return err
}

const getDashboardNotifications = `-- name: GetDashboardNotifications :many
SELECT n.id, n.type, n.severity, s.name AS service_name, v.external_id AS vulnerability_external_id
FROM notifications.notifications n
         LEFT JOIN service.services s ON n.service_id = s.id
         LEFT JOIN vulnerabilities.vulnerabilities v ON n.vulnerability_id = v.id
WHERE n.dismissed = FALSE
ORDER BY time
`

type GetDashboardNotificationsRow struct {
	ID                      int64
	Type                    NotificationsNotificationType
	Severity                NotificationsNotificationSeverity
	ServiceName             *string
	VulnerabilityExternalID *string
}

func (q *Queries) GetDashboardNotifications(ctx context.Context) ([]GetDashboardNotificationsRow, error) {
	rows, err := q.db.Query(ctx, getDashboardNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDashboardNotificationsRow
	for rows.Next() {
		var i GetDashboardNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Severity,
			&i.ServiceName,
			&i.VulnerabilityExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerabilityNotifications = `-- name: GetVulnerabilityNotifications :many
SELECT n.id, n.type, n.severity, s.id AS service_id
FROM notifications.notifications n
         LEFT JOIN service.services s ON n.service_id = s.id
         LEFT JOIN vulnerabilities.vulnerabilities v ON n.vulnerability_id = v.id
WHERE n.dismissed = FALSE
  AND v.external_id = $1
`

type GetVulnerabilityNotificationsRow struct {
	ID        int64
	Type      NotificationsNotificationType
	Severity  NotificationsNotificationSeverity
	ServiceID *int64
}

func (q *Queries) GetVulnerabilityNotifications(ctx context.Context, vulnerabilityExternalID string) ([]GetVulnerabilityNotificationsRow, error) {
	rows, err := q.db.Query(ctx, getVulnerabilityNotifications, vulnerabilityExternalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVulnerabilityNotificationsRow
	for rows.Next() {
		var i GetVulnerabilityNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Severity,
			&i.ServiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: register.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getServiceDependenciesForRegistration = `-- name: GetServiceDependenciesForRegistration :many
SELECT d.id, d.group_id, d.artifact_id, d.version
    FROM service.services s
    JOIN service.service_dependencies sd ON s.id = sd.service_id
    JOIN java.dependencies d ON s.id = sd.dependency_id
    WHERE s.name = $1 AND s.dependencies_hash = $2
`

type GetServiceDependenciesForRegistrationParams struct {
	Name             string
	DependenciesHash string
}

type GetServiceDependenciesForRegistrationRow struct {
	ID         int64
	GroupID    string
	ArtifactID string
	Version    string
}

func (q *Queries) GetServiceDependenciesForRegistration(ctx context.Context, arg GetServiceDependenciesForRegistrationParams) ([]GetServiceDependenciesForRegistrationRow, error) {
	rows, err := q.db.Query(ctx, getServiceDependenciesForRegistration, arg.Name, arg.DependenciesHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceDependenciesForRegistrationRow
	for rows.Next() {
		var i GetServiceDependenciesForRegistrationRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.ArtifactID,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceForRegistration = `-- name: GetServiceForRegistration :one
SELECT (id) FROM service.services WHERE name = $1 AND dependencies_hash = $2
`

type GetServiceForRegistrationParams struct {
	Name             string
	DependenciesHash string
}

func (q *Queries) GetServiceForRegistration(ctx context.Context, arg GetServiceForRegistrationParams) (int64, error) {
	row := q.db.QueryRow(ctx, getServiceForRegistration, arg.Name, arg.DependenciesHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type RegisterDependencyVulnerabilitiesParams struct {
	DependencyID    int64
	VulnerabilityID int64
}

const registerNewCallable = `-- name: RegisterNewCallable :one
INSERT INTO java.callables (fasten_id, package_name, class_name, method_name)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type RegisterNewCallableParams struct {
	FastenID    string
	PackageName string
	ClassName   string
	MethodName  string
}

func (q *Queries) RegisterNewCallable(ctx context.Context, arg RegisterNewCallableParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewCallable,
		arg.FastenID,
		arg.PackageName,
		arg.ClassName,
		arg.MethodName,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewDependency = `-- name: RegisterNewDependency :one
INSERT INTO java.dependencies (group_id, artifact_id, version)
    VALUES ($1, $2, $3)
    ON CONFLICT(group_id, artifact_id, version) DO UPDATE SET last_service_registration_time = NOW()
    RETURNING id
`

type RegisterNewDependencyParams struct {
	GroupID    string
	ArtifactID string
	Version    string
}

func (q *Queries) RegisterNewDependency(ctx context.Context, arg RegisterNewDependencyParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewDependency, arg.GroupID, arg.ArtifactID, arg.Version)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewService = `-- name: RegisterNewService :one
INSERT INTO service.services (name, dependencies_hash) VALUES ($1, $2) RETURNING id
`

type RegisterNewServiceParams struct {
	Name             string
	DependenciesHash string
}

func (q *Queries) RegisterNewService(ctx context.Context, arg RegisterNewServiceParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewService, arg.Name, arg.DependenciesHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewVulnerability = `-- name: RegisterNewVulnerability :one
INSERT INTO vulnerabilities.vulnerabilities (external_id, severity)
VALUES ($1, $2)
RETURNING id
`

type RegisterNewVulnerabilityParams struct {
	ExternalID string
	Severity   pgtype.Text
}

func (q *Queries) RegisterNewVulnerability(ctx context.Context, arg RegisterNewVulnerabilityParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewVulnerability, arg.ExternalID, arg.Severity)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type RegisterServiceDependenciesParams struct {
	ServiceID    int64
	DependencyID int64
}

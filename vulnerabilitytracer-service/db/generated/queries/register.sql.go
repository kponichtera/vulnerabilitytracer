// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: register.sql

package queries

import (
	"context"
)

const getCallablesForRegistration = `-- name: GetCallablesForRegistration :many
SELECT c.id, c.fasten_id
FROM java.callables c
WHERE c.fasten_id = ANY($1::varchar[])
`

type GetCallablesForRegistrationRow struct {
	ID       int64
	FastenID string
}

func (q *Queries) GetCallablesForRegistration(ctx context.Context, dollar_1 []string) ([]GetCallablesForRegistrationRow, error) {
	rows, err := q.db.Query(ctx, getCallablesForRegistration, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCallablesForRegistrationRow
	for rows.Next() {
		var i GetCallablesForRegistrationRow
		if err := rows.Scan(&i.ID, &i.FastenID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceDependenciesForRegistration = `-- name: GetServiceDependenciesForRegistration :many
SELECT d.id, d.group_id, d.artifact_id, d.version
FROM service.services s
         JOIN service.service_dependencies sd ON s.id = sd.service_id
         JOIN java.dependencies d ON s.id = sd.dependency_id
WHERE s.name = $1
  AND s.dependencies_hash = $2
`

type GetServiceDependenciesForRegistrationParams struct {
	Name             string
	DependenciesHash string
}

type GetServiceDependenciesForRegistrationRow struct {
	ID         int64
	GroupID    string
	ArtifactID string
	Version    string
}

func (q *Queries) GetServiceDependenciesForRegistration(ctx context.Context, arg GetServiceDependenciesForRegistrationParams) ([]GetServiceDependenciesForRegistrationRow, error) {
	rows, err := q.db.Query(ctx, getServiceDependenciesForRegistration, arg.Name, arg.DependenciesHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceDependenciesForRegistrationRow
	for rows.Next() {
		var i GetServiceDependenciesForRegistrationRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.ArtifactID,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceForRegistration = `-- name: GetServiceForRegistration :one
SELECT (id)
FROM service.services
WHERE name = $1
  AND dependencies_hash = $2
`

type GetServiceForRegistrationParams struct {
	Name             string
	DependenciesHash string
}

func (q *Queries) GetServiceForRegistration(ctx context.Context, arg GetServiceForRegistrationParams) (int64, error) {
	row := q.db.QueryRow(ctx, getServiceForRegistration, arg.Name, arg.DependenciesHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getVulnerabilitiesForRegistration = `-- name: GetVulnerabilitiesForRegistration :many
SELECT v.id, v.external_id
FROM vulnerabilities.vulnerabilities v
WHERE v.external_id = ANY($1::varchar[])
`

type GetVulnerabilitiesForRegistrationRow struct {
	ID         int64
	ExternalID string
}

func (q *Queries) GetVulnerabilitiesForRegistration(ctx context.Context, dollar_1 []string) ([]GetVulnerabilitiesForRegistrationRow, error) {
	rows, err := q.db.Query(ctx, getVulnerabilitiesForRegistration, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVulnerabilitiesForRegistrationRow
	for rows.Next() {
		var i GetVulnerabilitiesForRegistrationRow
		if err := rows.Scan(&i.ID, &i.ExternalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type RegisterDependencyVulnerabilitiesParams struct {
	DependencyID    int64
	VulnerabilityID int64
}

const registerNewCallable = `-- name: RegisterNewCallable :one
INSERT INTO java.callables (fasten_id, package_name, class_name, method_name)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type RegisterNewCallableParams struct {
	FastenID    string
	PackageName string
	ClassName   string
	MethodName  string
}

func (q *Queries) RegisterNewCallable(ctx context.Context, arg RegisterNewCallableParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewCallable,
		arg.FastenID,
		arg.PackageName,
		arg.ClassName,
		arg.MethodName,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewDependency = `-- name: RegisterNewDependency :one
INSERT INTO java.dependencies (group_id, artifact_id, version, fasten_processed, vulnerability_update_time)
VALUES ($1, $2, $3, $4, CASE WHEN $4 IS TRUE THEN NOW() END)
RETURNING id
`

type RegisterNewDependencyParams struct {
	GroupID         string
	ArtifactID      string
	Version         string
	FastenProcessed bool
}

func (q *Queries) RegisterNewDependency(ctx context.Context, arg RegisterNewDependencyParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewDependency,
		arg.GroupID,
		arg.ArtifactID,
		arg.Version,
		arg.FastenProcessed,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewService = `-- name: RegisterNewService :one
INSERT INTO service.services (name, dependencies_hash)
VALUES ($1, $2)
RETURNING id
`

type RegisterNewServiceParams struct {
	Name             string
	DependenciesHash string
}

func (q *Queries) RegisterNewService(ctx context.Context, arg RegisterNewServiceParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewService, arg.Name, arg.DependenciesHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const registerNewVulnerability = `-- name: RegisterNewVulnerability :one
INSERT INTO vulnerabilities.vulnerabilities (external_id, severity)
VALUES ($1, $2)
RETURNING id
`

type RegisterNewVulnerabilityParams struct {
	ExternalID string
	Severity   string
}

func (q *Queries) RegisterNewVulnerability(ctx context.Context, arg RegisterNewVulnerabilityParams) (int64, error) {
	row := q.db.QueryRow(ctx, registerNewVulnerability, arg.ExternalID, arg.Severity)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type RegisterServiceDependenciesParams struct {
	ServiceID    int64
	DependencyID int64
}

type RegisterVulnerabilityCallableRelationsParams struct {
	CallableID      int64
	VulnerabilityID int64
}

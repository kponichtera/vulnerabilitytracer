// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package queries

import (
	"context"
)

const getCallableVulnerabilities = `-- name: GetCallableVulnerabilities :many
SELECT c.id AS callable_id,
       v.external_id AS vulnerability_external_id,
       v.severity AS vulnerability_severity
FROM java.callables c
JOIN java.callables_vulnerabilities cv ON c.id = cv.callable_id
JOIN vulnerabilities.vulnerabilities v ON cv.vulnerability_id = v.id
WHERE c.id = ANY($1::bigint[])
`

type GetCallableVulnerabilitiesRow struct {
	CallableID              int64
	VulnerabilityExternalID string
	VulnerabilitySeverity   string
}

func (q *Queries) GetCallableVulnerabilities(ctx context.Context, dollar_1 []int64) ([]GetCallableVulnerabilitiesRow, error) {
	rows, err := q.db.Query(ctx, getCallableVulnerabilities, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCallableVulnerabilitiesRow
	for rows.Next() {
		var i GetCallableVulnerabilitiesRow
		if err := rows.Scan(&i.CallableID, &i.VulnerabilityExternalID, &i.VulnerabilitySeverity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceVulnerableCallables = `-- name: GetServiceVulnerableCallables :many
SELECT c.id, c.fasten_id, c.class_name, c.method_name, c.package_name,
       ms.strategy AS mitigation_strategy
FROM service.services s
JOIN service.service_dependencies sd ON s.id = sd.service_id
JOIN java.dependencies d ON sd.dependency_id = d.id
JOIN java.dependencies_vulnerabilities dv ON d.id = dv.dependency_id
JOIN vulnerabilities.vulnerabilities v ON dv.vulnerability_id = v.id
JOIN java.callables_vulnerabilities cv ON v.id = cv.vulnerability_id
JOIN java.callables c ON cv.callable_id = c.id
LEFT JOIN service.mitigation_strategies ms ON ms.callable_id = c.id AND ms.service_id = s.id
WHERE s.id = $1
`

type GetServiceVulnerableCallablesRow struct {
	ID                 int64
	FastenID           string
	ClassName          string
	MethodName         string
	PackageName        string
	MitigationStrategy *string
}

func (q *Queries) GetServiceVulnerableCallables(ctx context.Context, id int64) ([]GetServiceVulnerableCallablesRow, error) {
	rows, err := q.db.Query(ctx, getServiceVulnerableCallables, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceVulnerableCallablesRow
	for rows.Next() {
		var i GetServiceVulnerableCallablesRow
		if err := rows.Scan(
			&i.ID,
			&i.FastenID,
			&i.ClassName,
			&i.MethodName,
			&i.PackageName,
			&i.MitigationStrategy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

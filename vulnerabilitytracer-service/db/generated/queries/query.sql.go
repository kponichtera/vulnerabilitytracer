// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getServiceVulnerableCallables = `-- name: GetServiceVulnerableCallables :many
SELECT c.class_name, c.method_name, c.package_name,
       v.external_id AS vulnerability_external_id,
       v.severity AS vulnerability_severity,
       ms.strategy AS mitigation_strategy
FROM service.services s
JOIN service.service_dependencies sd ON s.id = sd.service_id
JOIN java.dependencies d ON sd.dependency_id = d.id
JOIN java.dependencies_vulnerabilities dv ON d.id = dv.dependency_id
JOIN vulnerabilities.vulnerabilities v ON dv.vulnerability_id = v.id
JOIN java.callables_vulnerabilities cv ON v.id = cv.vulnerability_id
JOIN java.callables c ON cv.callable_id = c.id
LEFT JOIN service.mitigation_strategies ms ON ms.callable_id = c.id AND ms.service_id = s.id
WHERE s.id = $1
`

type GetServiceVulnerableCallablesRow struct {
	ClassName               string
	MethodName              string
	PackageName             string
	VulnerabilityExternalID string
	VulnerabilitySeverity   string
	MitigationStrategy      pgtype.Text
}

func (q *Queries) GetServiceVulnerableCallables(ctx context.Context, id int64) ([]GetServiceVulnerableCallablesRow, error) {
	rows, err := q.db.Query(ctx, getServiceVulnerableCallables, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceVulnerableCallablesRow
	for rows.Next() {
		var i GetServiceVulnerableCallablesRow
		if err := rows.Scan(
			&i.ClassName,
			&i.MethodName,
			&i.PackageName,
			&i.VulnerabilityExternalID,
			&i.VulnerabilitySeverity,
			&i.MitigationStrategy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

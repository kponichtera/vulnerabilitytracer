-- name: GetDashboardVulnerabilities :many
SELECT v.external_id, v.severity, COUNT(e.id) AS trigger_count
FROM vulnerabilities.vulnerabilities v
         LEFT JOIN trace.events e ON v.external_id = e.vulnerability_external_id
    AND e.time > @from_time AND e.time < @to_time
GROUP BY v.external_id, v.severity
ORDER BY v.severity DESC, trigger_count DESC;

-- name: GetVulnerabilityServices :many
WITH service_dependencies AS (SELECT s.id AS service_id, s.name AS service_name, d.group_id, d.artifact_id, d.version
                              FROM vulnerabilities.vulnerabilities v
                                       JOIN java.dependencies_vulnerabilities dv ON v.id = dv.vulnerability_id
                                       JOIN java.dependencies d ON dv.dependency_id = d.id
                                       JOIN service.service_dependencies sd ON d.id = sd.dependency_id
                                       JOIN service.services s ON sd.service_id = s.id
                              WHERE v.external_id = @vulnerability_external_id),
     enabled_mitigations AS (SELECT sd.service_id, COUNT(ms.service_id) AS mitigation_count
                             FROM service_dependencies sd
                                      LEFT JOIN service.mitigation_strategies ms ON sd.service_id = ms.service_id
                                 AND ms.strategy != 'NONE'
                             GROUP BY sd.service_id),
     trigger_count AS (SELECT sd.service_id, COUNT(e.id) AS trigger_count
                       FROM service_dependencies sd
    LEFT JOIN trace.events e
ON sd.service_name = e.service_name
    AND e.time > @from_time AND e.time < @to_time
    AND e.vulnerability_external_id = @vulnerability_external_id
                       GROUP BY sd.service_id)
SELECT sd.service_id,
       sd.service_name,
       sd.group_id,
       sd.artifact_id,
       sd.version,
       em.mitigation_count,
       tc.trigger_count
FROM service_dependencies sd
         JOIN enabled_mitigations em ON sd.service_id = em.service_id
         JOIN trigger_count tc ON sd.service_id = tc.service_id;

-- name: GetServiceMitigations :many
WITH service_dependencies AS (SELECT s.id           AS service_id,
                                     s.name         AS service_name,
                                     d.group_id     AS dependency_group_id,
                                     d.artifact_id  AS dependency_artifact_id,
                                     d.version      AS dependency_version,
                                     c.id           AS callable_id,
                                     c.package_name AS callable_package_name,
                                     c.class_name   AS callable_class_name,
                                     c.method_name  AS callable_method_name
                              FROM vulnerabilities.vulnerabilities v
                                       JOIN java.dependencies_vulnerabilities dv ON v.id = dv.vulnerability_id
                                       JOIN java.dependencies d ON dv.dependency_id = d.id
                                       JOIN service.service_dependencies sd ON d.id = sd.dependency_id
                                       JOIN service.services s ON sd.service_id = s.id
                                       JOIN java.callables_vulnerabilities cv ON v.id = cv.vulnerability_id
                                       JOIN java.callables c ON cv.callable_id = c.id
                              WHERE v.external_id = @vulnerability_external_id),
     mitigations AS (SELECT sd.service_id, ms.callable_id, ms.strategy AS mitigation_strategy
                     FROM service_dependencies sd
                              LEFT JOIN service.mitigation_strategies ms ON sd.service_id = ms.service_id),
     nonmitigated_trigger_count AS (SELECT e.service_id, c.id AS callable_id, COUNT(e.id) AS trigger_count
                                    FROM java.callables c
                                             JOIN trace.events e ON e.callable_fasten_id = c.fasten_id
                                        AND e.time > @from_time AND e.time < @to_time
                                        AND e.mitigation_strategy = 'NONE'
                                    GROUP BY e.service_id, c.id),
     mitigated_trigger_count AS (SELECT e.service_id, c.id AS callable_id, COUNT(e.id) AS trigger_count
                                 FROM java.callables c
                                          JOIN trace.events e ON e.callable_fasten_id = c.fasten_id
                                     AND e.time > @from_time AND e.time < @to_time
                                     AND e.mitigation_strategy <> 'NONE'
                                 GROUP BY e.service_id, c.id)
SELECT sd.service_id,
       sd.service_name,
       sd.dependency_group_id,
       sd.dependency_artifact_id,
       sd.dependency_version,
       sd.callable_id,
       sd.callable_package_name,
       sd.callable_class_name,
       sd.callable_method_name,
       COALESCE(m.mitigation_strategy, 'NONE') AS mitigation_strategy,
       COALESCE(nmtc.trigger_count, 0)         AS nonmitigated_trigger_count,
       COALESCE(mtc.trigger_count, 0)          AS mitigated_trigger_count
FROM service_dependencies sd
         LEFT JOIN mitigations m ON sd.service_id = m.service_id AND sd.callable_id = m.callable_id
         LEFT JOIN nonmitigated_trigger_count nmtc
                   ON nmtc.service_id = sd.service_id AND nmtc.callable_id = m.callable_id
         LEFT JOIN mitigated_trigger_count mtc
                   ON mtc.service_id = sd.service_id AND mtc.callable_id = m.callable_id;

-- name: ApplyMitigationStrategy :exec
INSERT INTO service.mitigation_strategies (service_id, callable_id, strategy)
VALUES (@service_id, @callable_id, @strategy) ON CONFLICT (service_id, callable_id) DO
UPDATE SET strategy = @strategy;

-- name: GetImpactGraphNodes :many
SELECT n.trace_id, n.span_id, n.service_name, COUNT(e.id) AS vulnerability_trigger_count
FROM trace.trace_graph_nodes n
         JOIN trace.traces t ON n.trace_id = t.id
         LEFT JOIN trace.events e ON n.trace_id = e.trace_id AND n.span_id = e.span_id
    AND e.vulnerability_external_id = @vulnerability_external_id
WHERE t.time > @from_time AND t.time < @to_time
GROUP BY n.trace_id, n.span_id, n.service_name;

-- name: GetImpactGraphEdges :many
WITH RECURSIVE
    vulnerable_nodes AS (
        -- Base case: Nodes directly associated with the specified vulnerability
        SELECT e.trace_id, e.span_id, e.vulnerability_external_id
        FROM trace.traces t
                 JOIN trace.events e ON t.id = e.trace_id
        WHERE t.time > @from_time AND t.time < @to_time),
    reachable_nodes(trace_id, span_id, is_reachable) AS (
        -- Initial selection of vulnerable nodes
        SELECT trace_id, span_id, TRUE as is_reachable
        FROM vulnerable_nodes
        WHERE vulnerability_external_id = @vulnerability_external_id

        UNION ALL

        -- Recursive part: Find nodes leading to already identified reachable nodes
        SELECT e.source_trace_id, e.source_span_id, TRUE
        FROM trace.trace_graph_edges e
                 JOIN reachable_nodes rn ON e.target_trace_id = rn.trace_id AND e.target_span_id = rn.span_id
                 INNER JOIN trace.traces t ON e.source_trace_id = t.id
        WHERE t.time > @from_time AND t.time < @to_time),
    edges_with_reachability AS (SELECT e.source_trace_id,
                                       e.source_span_id,
                                       e.target_trace_id,
                                       e.target_span_id,
                                       -- Check if either the source or target node is marked as reachable
                                       (rn_source.is_reachable IS NOT NULL OR rn_target.is_reachable IS NOT NULL) AS leads_to_vulnerability
                                FROM trace.trace_graph_edges e
                                         LEFT JOIN reachable_nodes rn_source
                                                   ON e.source_trace_id = rn_source.trace_id AND
                                                      e.source_span_id = rn_source.span_id
                                         LEFT JOIN reachable_nodes rn_target
                                                   ON e.target_trace_id = rn_target.trace_id AND
                                                      e.target_span_id = rn_target.span_id
                                         INNER JOIN trace.traces t ON e.source_trace_id = t.id
                                WHERE t.time > @from_time AND t.time < @to_time)
SELECT source_trace_id, source_span_id, target_trace_id, target_span_id, leads_to_vulnerability
FROM edges_with_reachability;
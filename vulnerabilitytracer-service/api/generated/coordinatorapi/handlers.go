// Package coordinatorapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package coordinatorapi

import (
	"context"
	"fmt"

	"github.com/gofiber/fiber/v2"
)

// Defines values for MitigationStrategy.
const (
	ERROR MitigationStrategy = "ERROR"
	NONE  MitigationStrategy = "NONE"
	NOOP  MitigationStrategy = "NOOP"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL  VulnerabilitySeverity = "CRITICAL"
	HIGH      VulnerabilitySeverity = "HIGH"
	LOW       VulnerabilitySeverity = "LOW"
	MEDIUM    VulnerabilitySeverity = "MEDIUM"
	MODERATE  VulnerabilitySeverity = "MODERATE"
	UNDEFINED VulnerabilitySeverity = "UNDEFINED"
)

// AddMockVulnerabilityRequestPayload defines model for AddMockVulnerabilityRequestPayload.
type AddMockVulnerabilityRequestPayload struct {
	Dependency              MavenCoordinates      `json:"dependency"`
	Severity                VulnerabilitySeverity `json:"severity"`
	VulnerabilityExternalId string                `json:"vulnerabilityExternalId"`
}

// AddMockVulnerableCallableRequestPayload defines model for AddMockVulnerableCallableRequestPayload.
type AddMockVulnerableCallableRequestPayload struct {
	ClassName          string              `json:"className"`
	MethodName         string              `json:"methodName"`
	MitigationStrategy *MitigationStrategy `json:"mitigationStrategy,omitempty"`
	PackageName        string              `json:"packageName"`

	// ServiceName Name of the service to register the mitigation strategy for. Omit to skip mitigation creation.
	ServiceName              *string  `json:"serviceName,omitempty"`
	VulnerabilityExternalIds []string `json:"vulnerabilityExternalIds"`
}

// ErrorResponsePayload defines model for ErrorResponsePayload.
type ErrorResponsePayload struct {
	Message string `json:"message"`
}

// JavaCallable defines model for JavaCallable.
type JavaCallable struct {
	ClassName          string                  `json:"className"`
	FastenId           string                  `json:"fastenId"`
	MethodName         string                  `json:"methodName"`
	MitigationStrategy MitigationStrategy      `json:"mitigationStrategy"`
	PackageName        string                  `json:"packageName"`
	Vulnerabilities    []VulnerabilityMetadata `json:"vulnerabilities"`
}

// MavenCoordinates defines model for MavenCoordinates.
type MavenCoordinates struct {
	ArtifactId string `json:"artifactId"`
	GroupId    string `json:"groupId"`
	Version    string `json:"version"`
}

// MitigationStrategy defines model for MitigationStrategy.
type MitigationStrategy string

// RegisterRequestPayload defines model for RegisterRequestPayload.
type RegisterRequestPayload struct {
	Dependencies []MavenCoordinates `json:"dependencies"`

	// ServiceName Name of the service to register
	ServiceName string `json:"serviceName"`
}

// RegisterResponsePayload defines model for RegisterResponsePayload.
type RegisterResponsePayload struct {
	Callables *[]JavaCallable `json:"callables,omitempty"`
}

// VulnerabilityMetadata defines model for VulnerabilityMetadata.
type VulnerabilityMetadata struct {
	ExternalId string                `json:"externalId"`
	Severity   VulnerabilitySeverity `json:"severity"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// AddMockCallableJSONRequestBody defines body for AddMockCallable for application/json ContentType.
type AddMockCallableJSONRequestBody = AddMockVulnerableCallableRequestPayload

// AddMockVulnerabilityJSONRequestBody defines body for AddMockVulnerability for application/json ContentType.
type AddMockVulnerabilityJSONRequestBody = AddMockVulnerabilityRequestPayload

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequestPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a vulnerable callable to the dependency
	// (POST /api/mock/addCallable)
	AddMockCallable(c *fiber.Ctx) error
	// Register a mock vulnerability in the database
	// (POST /api/mock/addVulnerability)
	AddMockVulnerability(c *fiber.Ctx) error
	// Register service and get vulnerable callables for the microservice
	// (POST /api/register)
	Register(c *fiber.Ctx) error
	// Check server liveness
	// (GET /liveness)
	Liveness(c *fiber.Ctx) error
	// Check server readiness
	// (GET /readiness)
	Readiness(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// AddMockCallable operation middleware
func (siw *ServerInterfaceWrapper) AddMockCallable(c *fiber.Ctx) error {

	return siw.Handler.AddMockCallable(c)
}

// AddMockVulnerability operation middleware
func (siw *ServerInterfaceWrapper) AddMockVulnerability(c *fiber.Ctx) error {

	return siw.Handler.AddMockVulnerability(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *fiber.Ctx) error {

	return siw.Handler.Register(c)
}

// Liveness operation middleware
func (siw *ServerInterfaceWrapper) Liveness(c *fiber.Ctx) error {

	return siw.Handler.Liveness(c)
}

// Readiness operation middleware
func (siw *ServerInterfaceWrapper) Readiness(c *fiber.Ctx) error {

	return siw.Handler.Readiness(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/mock/addCallable", wrapper.AddMockCallable)

	router.Post(options.BaseURL+"/api/mock/addVulnerability", wrapper.AddMockVulnerability)

	router.Post(options.BaseURL+"/api/register", wrapper.Register)

	router.Get(options.BaseURL+"/liveness", wrapper.Liveness)

	router.Get(options.BaseURL+"/readiness", wrapper.Readiness)

}

type AddMockCallableRequestObject struct {
	Body *AddMockCallableJSONRequestBody
}

type AddMockCallableResponseObject interface {
	VisitAddMockCallableResponse(ctx *fiber.Ctx) error
}

type AddMockCallable200Response struct {
}

func (response AddMockCallable200Response) VisitAddMockCallableResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddMockCallable400JSONResponse ErrorResponsePayload

func (response AddMockCallable400JSONResponse) VisitAddMockCallableResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AddMockCallable500JSONResponse ErrorResponsePayload

func (response AddMockCallable500JSONResponse) VisitAddMockCallableResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AddMockVulnerabilityRequestObject struct {
	Body *AddMockVulnerabilityJSONRequestBody
}

type AddMockVulnerabilityResponseObject interface {
	VisitAddMockVulnerabilityResponse(ctx *fiber.Ctx) error
}

type AddMockVulnerability200Response struct {
}

func (response AddMockVulnerability200Response) VisitAddMockVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddMockVulnerability400JSONResponse ErrorResponsePayload

func (response AddMockVulnerability400JSONResponse) VisitAddMockVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AddMockVulnerability500JSONResponse ErrorResponsePayload

func (response AddMockVulnerability500JSONResponse) VisitAddMockVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(ctx *fiber.Ctx) error
}

type Register200JSONResponse RegisterResponsePayload

func (response Register200JSONResponse) VisitRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Register400JSONResponse ErrorResponsePayload

func (response Register400JSONResponse) VisitRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type Register500JSONResponse ErrorResponsePayload

func (response Register500JSONResponse) VisitRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type LivenessRequestObject struct {
}

type LivenessResponseObject interface {
	VisitLivenessResponse(ctx *fiber.Ctx) error
}

type Liveness200Response struct {
}

func (response Liveness200Response) VisitLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type Liveness500Response struct {
}

func (response Liveness500Response) VisitLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type ReadinessRequestObject struct {
}

type ReadinessResponseObject interface {
	VisitReadinessResponse(ctx *fiber.Ctx) error
}

type Readiness200Response struct {
}

func (response Readiness200Response) VisitReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a vulnerable callable to the dependency
	// (POST /api/mock/addCallable)
	AddMockCallable(ctx context.Context, request AddMockCallableRequestObject) (AddMockCallableResponseObject, error)
	// Register a mock vulnerability in the database
	// (POST /api/mock/addVulnerability)
	AddMockVulnerability(ctx context.Context, request AddMockVulnerabilityRequestObject) (AddMockVulnerabilityResponseObject, error)
	// Register service and get vulnerable callables for the microservice
	// (POST /api/register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
	// Check server liveness
	// (GET /liveness)
	Liveness(ctx context.Context, request LivenessRequestObject) (LivenessResponseObject, error)
	// Check server readiness
	// (GET /readiness)
	Readiness(ctx context.Context, request ReadinessRequestObject) (ReadinessResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddMockCallable operation middleware
func (sh *strictHandler) AddMockCallable(ctx *fiber.Ctx) error {
	var request AddMockCallableRequestObject

	var body AddMockCallableJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddMockCallable(ctx.UserContext(), request.(AddMockCallableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddMockCallable")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddMockCallableResponseObject); ok {
		if err := validResponse.VisitAddMockCallableResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddMockVulnerability operation middleware
func (sh *strictHandler) AddMockVulnerability(ctx *fiber.Ctx) error {
	var request AddMockVulnerabilityRequestObject

	var body AddMockVulnerabilityJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddMockVulnerability(ctx.UserContext(), request.(AddMockVulnerabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddMockVulnerability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddMockVulnerabilityResponseObject); ok {
		if err := validResponse.VisitAddMockVulnerabilityResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Register operation middleware
func (sh *strictHandler) Register(ctx *fiber.Ctx) error {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx.UserContext(), request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		if err := validResponse.VisitRegisterResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Liveness operation middleware
func (sh *strictHandler) Liveness(ctx *fiber.Ctx) error {
	var request LivenessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Liveness(ctx.UserContext(), request.(LivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Liveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LivenessResponseObject); ok {
		if err := validResponse.VisitLivenessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Readiness operation middleware
func (sh *strictHandler) Readiness(ctx *fiber.Ctx) error {
	var request ReadinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Readiness(ctx.UserContext(), request.(ReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Readiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ReadinessResponseObject); ok {
		if err := validResponse.VisitReadinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

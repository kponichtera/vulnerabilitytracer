// Package coordinatorapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package coordinatorapi

import (
	"context"
	"fmt"

	"github.com/gofiber/fiber/v2"
)

// Defines values for MitigationStrategy.
const (
	ERROR MitigationStrategy = "ERROR"
	NONE  MitigationStrategy = "NONE"
	NOOP  MitigationStrategy = "NOOP"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL  VulnerabilitySeverity = "CRITICAL"
	HIGH      VulnerabilitySeverity = "HIGH"
	LOW       VulnerabilitySeverity = "LOW"
	MEDIUM    VulnerabilitySeverity = "MEDIUM"
	MODERATE  VulnerabilitySeverity = "MODERATE"
	UNDEFINED VulnerabilitySeverity = "UNDEFINED"
)

// AddMockVulnerabilityRequest defines model for AddMockVulnerabilityRequest.
type AddMockVulnerabilityRequest struct {
	Dependency              MavenCoordinates      `json:"dependency"`
	Severity                VulnerabilitySeverity `json:"severity"`
	VulnerabilityExternalId string                `json:"vulnerabilityExternalId"`
}

// AddMockVulnerableCallableRequest defines model for AddMockVulnerableCallableRequest.
type AddMockVulnerableCallableRequest struct {
	ClassName          string              `json:"className"`
	MethodName         string              `json:"methodName"`
	MitigationStrategy *MitigationStrategy `json:"mitigationStrategy,omitempty"`
	PackageName        string              `json:"packageName"`

	// ServiceName Name of the service to register the mitigation strategy for. Omit to skip mitigation creation.
	ServiceName              *string  `json:"serviceName,omitempty"`
	VulnerabilityExternalIds []string `json:"vulnerabilityExternalIds"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// JavaCallable defines model for JavaCallable.
type JavaCallable struct {
	ClassName          string                  `json:"className"`
	MethodName         string                  `json:"methodName"`
	MitigationStrategy MitigationStrategy      `json:"mitigationStrategy"`
	PackageName        string                  `json:"packageName"`
	Vulnerabilities    []VulnerabilityMetadata `json:"vulnerabilities"`
}

// MavenCoordinates defines model for MavenCoordinates.
type MavenCoordinates struct {
	ArtifactId string `json:"artifactId"`
	GroupId    string `json:"groupId"`
	Version    string `json:"version"`
}

// MitigationStrategy defines model for MitigationStrategy.
type MitigationStrategy string

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Dependencies []MavenCoordinates `json:"dependencies"`

	// ServiceName Name of the service to register
	ServiceName string `json:"serviceName"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Callables *[]JavaCallable `json:"callables,omitempty"`
}

// VulnerabilityMetadata defines model for VulnerabilityMetadata.
type VulnerabilityMetadata struct {
	ExternalId string                `json:"externalId"`
	Severity   VulnerabilitySeverity `json:"severity"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// PostApiMockAddCallableJSONRequestBody defines body for PostApiMockAddCallable for application/json ContentType.
type PostApiMockAddCallableJSONRequestBody = AddMockVulnerableCallableRequest

// PostApiMockAddVulnerabilityJSONRequestBody defines body for PostApiMockAddVulnerability for application/json ContentType.
type PostApiMockAddVulnerabilityJSONRequestBody = AddMockVulnerabilityRequest

// PostApiRegisterJSONRequestBody defines body for PostApiRegister for application/json ContentType.
type PostApiRegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a vulnerable callable to the dependency
	// (POST /api/mock/addCallable)
	PostApiMockAddCallable(c *fiber.Ctx) error
	// Register a mock vulnerability in the database
	// (POST /api/mock/addVulnerability)
	PostApiMockAddVulnerability(c *fiber.Ctx) error
	// Register service and get vulnerable callables for the microservice
	// (POST /api/register)
	PostApiRegister(c *fiber.Ctx) error
	// Check server liveness
	// (GET /liveness)
	GetLiveness(c *fiber.Ctx) error
	// Check server readiness
	// (GET /readiness)
	GetReadiness(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostApiMockAddCallable operation middleware
func (siw *ServerInterfaceWrapper) PostApiMockAddCallable(c *fiber.Ctx) error {

	return siw.Handler.PostApiMockAddCallable(c)
}

// PostApiMockAddVulnerability operation middleware
func (siw *ServerInterfaceWrapper) PostApiMockAddVulnerability(c *fiber.Ctx) error {

	return siw.Handler.PostApiMockAddVulnerability(c)
}

// PostApiRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiRegister(c *fiber.Ctx) error {

	return siw.Handler.PostApiRegister(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *fiber.Ctx) error {

	return siw.Handler.GetLiveness(c)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *fiber.Ctx) error {

	return siw.Handler.GetReadiness(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/mock/addCallable", wrapper.PostApiMockAddCallable)

	router.Post(options.BaseURL+"/api/mock/addVulnerability", wrapper.PostApiMockAddVulnerability)

	router.Post(options.BaseURL+"/api/register", wrapper.PostApiRegister)

	router.Get(options.BaseURL+"/liveness", wrapper.GetLiveness)

	router.Get(options.BaseURL+"/readiness", wrapper.GetReadiness)

}

type PostApiMockAddCallableRequestObject struct {
	Body *PostApiMockAddCallableJSONRequestBody
}

type PostApiMockAddCallableResponseObject interface {
	VisitPostApiMockAddCallableResponse(ctx *fiber.Ctx) error
}

type PostApiMockAddCallable200Response struct {
}

func (response PostApiMockAddCallable200Response) VisitPostApiMockAddCallableResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostApiMockAddCallable400JSONResponse ErrorResponse

func (response PostApiMockAddCallable400JSONResponse) VisitPostApiMockAddCallableResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostApiMockAddCallable500JSONResponse ErrorResponse

func (response PostApiMockAddCallable500JSONResponse) VisitPostApiMockAddCallableResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiMockAddVulnerabilityRequestObject struct {
	Body *PostApiMockAddVulnerabilityJSONRequestBody
}

type PostApiMockAddVulnerabilityResponseObject interface {
	VisitPostApiMockAddVulnerabilityResponse(ctx *fiber.Ctx) error
}

type PostApiMockAddVulnerability200Response struct {
}

func (response PostApiMockAddVulnerability200Response) VisitPostApiMockAddVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostApiMockAddVulnerability400JSONResponse ErrorResponse

func (response PostApiMockAddVulnerability400JSONResponse) VisitPostApiMockAddVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostApiMockAddVulnerability500JSONResponse ErrorResponse

func (response PostApiMockAddVulnerability500JSONResponse) VisitPostApiMockAddVulnerabilityResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiRegisterRequestObject struct {
	Body *PostApiRegisterJSONRequestBody
}

type PostApiRegisterResponseObject interface {
	VisitPostApiRegisterResponse(ctx *fiber.Ctx) error
}

type PostApiRegister200JSONResponse RegisterResponse

func (response PostApiRegister200JSONResponse) VisitPostApiRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostApiRegister400JSONResponse ErrorResponse

func (response PostApiRegister400JSONResponse) VisitPostApiRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostApiRegister500JSONResponse ErrorResponse

func (response PostApiRegister500JSONResponse) VisitPostApiRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetLivenessRequestObject struct {
}

type GetLivenessResponseObject interface {
	VisitGetLivenessResponse(ctx *fiber.Ctx) error
}

type GetLiveness200Response struct {
}

func (response GetLiveness200Response) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetLiveness500Response struct {
}

func (response GetLiveness500Response) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type GetReadinessRequestObject struct {
}

type GetReadinessResponseObject interface {
	VisitGetReadinessResponse(ctx *fiber.Ctx) error
}

type GetReadiness200Response struct {
}

func (response GetReadiness200Response) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a vulnerable callable to the dependency
	// (POST /api/mock/addCallable)
	PostApiMockAddCallable(ctx context.Context, request PostApiMockAddCallableRequestObject) (PostApiMockAddCallableResponseObject, error)
	// Register a mock vulnerability in the database
	// (POST /api/mock/addVulnerability)
	PostApiMockAddVulnerability(ctx context.Context, request PostApiMockAddVulnerabilityRequestObject) (PostApiMockAddVulnerabilityResponseObject, error)
	// Register service and get vulnerable callables for the microservice
	// (POST /api/register)
	PostApiRegister(ctx context.Context, request PostApiRegisterRequestObject) (PostApiRegisterResponseObject, error)
	// Check server liveness
	// (GET /liveness)
	GetLiveness(ctx context.Context, request GetLivenessRequestObject) (GetLivenessResponseObject, error)
	// Check server readiness
	// (GET /readiness)
	GetReadiness(ctx context.Context, request GetReadinessRequestObject) (GetReadinessResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiMockAddCallable operation middleware
func (sh *strictHandler) PostApiMockAddCallable(ctx *fiber.Ctx) error {
	var request PostApiMockAddCallableRequestObject

	var body PostApiMockAddCallableJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMockAddCallable(ctx.UserContext(), request.(PostApiMockAddCallableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMockAddCallable")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiMockAddCallableResponseObject); ok {
		if err := validResponse.VisitPostApiMockAddCallableResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiMockAddVulnerability operation middleware
func (sh *strictHandler) PostApiMockAddVulnerability(ctx *fiber.Ctx) error {
	var request PostApiMockAddVulnerabilityRequestObject

	var body PostApiMockAddVulnerabilityJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMockAddVulnerability(ctx.UserContext(), request.(PostApiMockAddVulnerabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMockAddVulnerability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiMockAddVulnerabilityResponseObject); ok {
		if err := validResponse.VisitPostApiMockAddVulnerabilityResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiRegister operation middleware
func (sh *strictHandler) PostApiRegister(ctx *fiber.Ctx) error {
	var request PostApiRegisterRequestObject

	var body PostApiRegisterJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiRegister(ctx.UserContext(), request.(PostApiRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiRegisterResponseObject); ok {
		if err := validResponse.VisitPostApiRegisterResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLiveness operation middleware
func (sh *strictHandler) GetLiveness(ctx *fiber.Ctx) error {
	var request GetLivenessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLiveness(ctx.UserContext(), request.(GetLivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLiveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLivenessResponseObject); ok {
		if err := validResponse.VisitGetLivenessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReadiness operation middleware
func (sh *strictHandler) GetReadiness(ctx *fiber.Ctx) error {
	var request GetReadinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReadiness(ctx.UserContext(), request.(GetReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReadiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadinessResponseObject); ok {
		if err := validResponse.VisitGetReadinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

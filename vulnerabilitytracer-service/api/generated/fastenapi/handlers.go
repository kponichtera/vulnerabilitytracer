// Package fastenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package fastenapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Callable defines model for Callable.
type Callable struct {
	// FastenUri FASTEN URI (without schema)
	FastenUri string `json:"fasten_uri"`

	// IsInternalCall The vulnerability's identifier within FASTEN database
	IsInternalCall bool             `json:"is_internal_call"`
	Metadata       CallableMetadata `json:"metadata"`
}

// CallableMetadata defines model for CallableMetadata.
type CallableMetadata struct {
	Quality         *CallableQuality                   `json:"quality,omitempty"`
	Vulnerabilities *map[string]map[string]interface{} `json:"vulnerabilities,omitempty"`
}

// CallableQuality defines model for CallableQuality.
type CallableQuality struct {
	// CallableName Name of the callable
	CallableName string `json:"callable_name"`
}

// PackageVulnerability defines model for PackageVulnerability.
type PackageVulnerability struct {
	// ExternalId The vulnerability's external identifier (usually CVE)
	ExternalId string `json:"external_id"`

	// Id The vulnerability's identifier within FASTEN database
	Id int `json:"id"`

	// Statement The vulnerability's attributes
	Statement map[string]interface{} `json:"statement"`
}

// GetCallablesJSONBody defines parameters for GetCallables.
type GetCallablesJSONBody = []int

// GetPackageVulnerabilitiesParams defines parameters for GetPackageVulnerabilities.
type GetPackageVulnerabilitiesParams struct {
	// Attributes Comma-separated list of attributes to fetch. Leave empty to fetch all.
	Attributes *string `form:"attributes,omitempty" json:"attributes,omitempty"`
}

// GetCallablesJSONRequestBody defines body for GetCallables for application/json ContentType.
type GetCallablesJSONRequestBody = GetCallablesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCallablesWithBody request with any body
	GetCallablesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCallables(ctx context.Context, body GetCallablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageDetails request
	GetPackageDetails(ctx context.Context, groupId string, artifactId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageVulnerabilities request
	GetPackageVulnerabilities(ctx context.Context, groupId string, artifactId string, version string, params *GetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVulnerabilityCallables request
	GetVulnerabilityCallables(ctx context.Context, vulnerabilityExternalId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCallablesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallablesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallables(ctx context.Context, body GetCallablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallablesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageDetails(ctx context.Context, groupId string, artifactId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageDetailsRequest(c.Server, groupId, artifactId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageVulnerabilities(ctx context.Context, groupId string, artifactId string, version string, params *GetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageVulnerabilitiesRequest(c.Server, groupId, artifactId, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVulnerabilityCallables(ctx context.Context, vulnerabilityExternalId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVulnerabilityCallablesRequest(c.Server, vulnerabilityExternalId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCallablesRequest calls the generic GetCallables builder with application/json body
func NewGetCallablesRequest(server string, body GetCallablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCallablesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetCallablesRequestWithBody generates requests for GetCallables with any type of body
func NewGetCallablesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mvn/callables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPackageDetailsRequest generates requests for GetPackageDetails
func NewGetPackageDetailsRequest(server string, groupId string, artifactId string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactId", runtime.ParamLocationPath, artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mvn/packages/%s:%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPackageVulnerabilitiesRequest generates requests for GetPackageVulnerabilities
func NewGetPackageVulnerabilitiesRequest(server string, groupId string, artifactId string, version string, params *GetPackageVulnerabilitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactId", runtime.ParamLocationPath, artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mvn/packages/%s:%s/%s/vulnerabilities", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Attributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributes", runtime.ParamLocationQuery, *params.Attributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVulnerabilityCallablesRequest generates requests for GetVulnerabilityCallables
func NewGetVulnerabilityCallablesRequest(server string, vulnerabilityExternalId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vulnerabilityExternalId", runtime.ParamLocationPath, vulnerabilityExternalId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mvn/vulnerabilities/%s/callables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCallablesWithBodyWithResponse request with any body
	GetCallablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCallablesResponse, error)

	GetCallablesWithResponse(ctx context.Context, body GetCallablesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCallablesResponse, error)

	// GetPackageDetailsWithResponse request
	GetPackageDetailsWithResponse(ctx context.Context, groupId string, artifactId string, version string, reqEditors ...RequestEditorFn) (*GetPackageDetailsResponse, error)

	// GetPackageVulnerabilitiesWithResponse request
	GetPackageVulnerabilitiesWithResponse(ctx context.Context, groupId string, artifactId string, version string, params *GetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*GetPackageVulnerabilitiesResponse, error)

	// GetVulnerabilityCallablesWithResponse request
	GetVulnerabilityCallablesWithResponse(ctx context.Context, vulnerabilityExternalId string, reqEditors ...RequestEditorFn) (*GetVulnerabilityCallablesResponse, error)
}

type GetCallablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]Callable
}

// Status returns HTTPResponse.Status
func (r GetCallablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPackageDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PackageVulnerability
}

// Status returns HTTPResponse.Status
func (r GetPackageVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVulnerabilityCallablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetVulnerabilityCallablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVulnerabilityCallablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCallablesWithBodyWithResponse request with arbitrary body returning *GetCallablesResponse
func (c *ClientWithResponses) GetCallablesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCallablesResponse, error) {
	rsp, err := c.GetCallablesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallablesResponse(rsp)
}

func (c *ClientWithResponses) GetCallablesWithResponse(ctx context.Context, body GetCallablesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCallablesResponse, error) {
	rsp, err := c.GetCallables(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallablesResponse(rsp)
}

// GetPackageDetailsWithResponse request returning *GetPackageDetailsResponse
func (c *ClientWithResponses) GetPackageDetailsWithResponse(ctx context.Context, groupId string, artifactId string, version string, reqEditors ...RequestEditorFn) (*GetPackageDetailsResponse, error) {
	rsp, err := c.GetPackageDetails(ctx, groupId, artifactId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageDetailsResponse(rsp)
}

// GetPackageVulnerabilitiesWithResponse request returning *GetPackageVulnerabilitiesResponse
func (c *ClientWithResponses) GetPackageVulnerabilitiesWithResponse(ctx context.Context, groupId string, artifactId string, version string, params *GetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*GetPackageVulnerabilitiesResponse, error) {
	rsp, err := c.GetPackageVulnerabilities(ctx, groupId, artifactId, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageVulnerabilitiesResponse(rsp)
}

// GetVulnerabilityCallablesWithResponse request returning *GetVulnerabilityCallablesResponse
func (c *ClientWithResponses) GetVulnerabilityCallablesWithResponse(ctx context.Context, vulnerabilityExternalId string, reqEditors ...RequestEditorFn) (*GetVulnerabilityCallablesResponse, error) {
	rsp, err := c.GetVulnerabilityCallables(ctx, vulnerabilityExternalId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVulnerabilityCallablesResponse(rsp)
}

// ParseGetCallablesResponse parses an HTTP response from a GetCallablesWithResponse call
func ParseGetCallablesResponse(rsp *http.Response) (*GetCallablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]Callable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackageDetailsResponse parses an HTTP response from a GetPackageDetailsWithResponse call
func ParseGetPackageDetailsResponse(rsp *http.Response) (*GetPackageDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPackageVulnerabilitiesResponse parses an HTTP response from a GetPackageVulnerabilitiesWithResponse call
func ParseGetPackageVulnerabilitiesResponse(rsp *http.Response) (*GetPackageVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackageVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PackageVulnerability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVulnerabilityCallablesResponse parses an HTTP response from a GetVulnerabilityCallablesWithResponse call
func ParseGetVulnerabilityCallablesResponse(rsp *http.Response) (*GetVulnerabilityCallablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVulnerabilityCallablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

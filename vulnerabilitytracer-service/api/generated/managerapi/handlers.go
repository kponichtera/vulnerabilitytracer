// Package managerapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package managerapi

import (
	"context"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v2"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL  VulnerabilitySeverity = "CRITICAL"
	HIGH      VulnerabilitySeverity = "HIGH"
	LOW       VulnerabilitySeverity = "LOW"
	MEDIUM    VulnerabilitySeverity = "MEDIUM"
	MODERATE  VulnerabilitySeverity = "MODERATE"
	UNDEFINED VulnerabilitySeverity = "UNDEFINED"
)

// ErrorResponsePayload defines model for ErrorResponsePayload.
type ErrorResponsePayload struct {
	Message string `json:"message"`
}

// GetDashboardVulnerabilitiesRequestPayload defines model for GetDashboardVulnerabilitiesRequestPayload.
type GetDashboardVulnerabilitiesRequestPayload struct {
	FromDateTime time.Time `json:"fromDateTime"`
	ToDateTime   time.Time `json:"toDateTime"`
}

// GetDashboardVulnerabilitiesResponsePayload defines model for GetDashboardVulnerabilitiesResponsePayload.
type GetDashboardVulnerabilitiesResponsePayload struct {
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// Vulnerability Brief information about vulnerability, to be used in the dashboard table
type Vulnerability struct {
	ExternalId   string                `json:"externalId"`
	Severity     VulnerabilitySeverity `json:"severity"`
	TriggerCount float32               `json:"triggerCount"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// GetDashboardVulnerabilitiesJSONRequestBody defines body for GetDashboardVulnerabilities for application/json ContentType.
type GetDashboardVulnerabilitiesJSONRequestBody = GetDashboardVulnerabilitiesRequestPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of vulnerabilities for the dashboard
	// (POST /api/dashboard/getVulnerabilities)
	GetDashboardVulnerabilities(c *fiber.Ctx) error
	// Check server liveness
	// (GET /liveness)
	GetLiveness(c *fiber.Ctx) error
	// Check server readiness
	// (GET /readiness)
	GetReadiness(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetDashboardVulnerabilities operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardVulnerabilities(c *fiber.Ctx) error {

	return siw.Handler.GetDashboardVulnerabilities(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *fiber.Ctx) error {

	return siw.Handler.GetLiveness(c)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *fiber.Ctx) error {

	return siw.Handler.GetReadiness(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/dashboard/getVulnerabilities", wrapper.GetDashboardVulnerabilities)

	router.Get(options.BaseURL+"/liveness", wrapper.GetLiveness)

	router.Get(options.BaseURL+"/readiness", wrapper.GetReadiness)

}

type GetDashboardVulnerabilitiesRequestObject struct {
	Body *GetDashboardVulnerabilitiesJSONRequestBody
}

type GetDashboardVulnerabilitiesResponseObject interface {
	VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error
}

type GetDashboardVulnerabilities200JSONResponse GetDashboardVulnerabilitiesResponsePayload

func (response GetDashboardVulnerabilities200JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetDashboardVulnerabilities400JSONResponse ErrorResponsePayload

func (response GetDashboardVulnerabilities400JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetDashboardVulnerabilities500JSONResponse ErrorResponsePayload

func (response GetDashboardVulnerabilities500JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetLivenessRequestObject struct {
}

type GetLivenessResponseObject interface {
	VisitGetLivenessResponse(ctx *fiber.Ctx) error
}

type GetLiveness200Response struct {
}

func (response GetLiveness200Response) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetLiveness500Response struct {
}

func (response GetLiveness500Response) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type GetReadinessRequestObject struct {
}

type GetReadinessResponseObject interface {
	VisitGetReadinessResponse(ctx *fiber.Ctx) error
}

type GetReadiness200Response struct {
}

func (response GetReadiness200Response) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of vulnerabilities for the dashboard
	// (POST /api/dashboard/getVulnerabilities)
	GetDashboardVulnerabilities(ctx context.Context, request GetDashboardVulnerabilitiesRequestObject) (GetDashboardVulnerabilitiesResponseObject, error)
	// Check server liveness
	// (GET /liveness)
	GetLiveness(ctx context.Context, request GetLivenessRequestObject) (GetLivenessResponseObject, error)
	// Check server readiness
	// (GET /readiness)
	GetReadiness(ctx context.Context, request GetReadinessRequestObject) (GetReadinessResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetDashboardVulnerabilities operation middleware
func (sh *strictHandler) GetDashboardVulnerabilities(ctx *fiber.Ctx) error {
	var request GetDashboardVulnerabilitiesRequestObject

	var body GetDashboardVulnerabilitiesJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetDashboardVulnerabilities(ctx.UserContext(), request.(GetDashboardVulnerabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDashboardVulnerabilities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetDashboardVulnerabilitiesResponseObject); ok {
		if err := validResponse.VisitGetDashboardVulnerabilitiesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLiveness operation middleware
func (sh *strictHandler) GetLiveness(ctx *fiber.Ctx) error {
	var request GetLivenessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLiveness(ctx.UserContext(), request.(GetLivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLiveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLivenessResponseObject); ok {
		if err := validResponse.VisitGetLivenessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReadiness operation middleware
func (sh *strictHandler) GetReadiness(ctx *fiber.Ctx) error {
	var request GetReadinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReadiness(ctx.UserContext(), request.(GetReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReadiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadinessResponseObject); ok {
		if err := validResponse.VisitGetReadinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

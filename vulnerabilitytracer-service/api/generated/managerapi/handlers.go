// Package managerapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package managerapi

import (
	"context"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v2"
)

// Defines values for MitigationStrategy.
const (
	ERROR MitigationStrategy = "ERROR"
	NONE  MitigationStrategy = "NONE"
	NOOP  MitigationStrategy = "NOOP"
)

// Defines values for VulnerabilitySeverity.
const (
	CRITICAL  VulnerabilitySeverity = "CRITICAL"
	HIGH      VulnerabilitySeverity = "HIGH"
	LOW       VulnerabilitySeverity = "LOW"
	MEDIUM    VulnerabilitySeverity = "MEDIUM"
	MODERATE  VulnerabilitySeverity = "MODERATE"
	UNDEFINED VulnerabilitySeverity = "UNDEFINED"
)

// ApplyMitigationStrategyRequestPayload defines model for ApplyMitigationStrategyRequestPayload.
type ApplyMitigationStrategyRequestPayload struct {
	CallableId         int                `json:"callableId"`
	MitigationStrategy MitigationStrategy `json:"mitigationStrategy"`
	ServiceId          int                `json:"serviceId"`
}

// CallableMitigation defines model for CallableMitigation.
type CallableMitigation struct {
	CallableClassName        string             `json:"callableClassName"`
	CallableId               int                `json:"callableId"`
	CallableMethodName       string             `json:"callableMethodName"`
	CallablePackageName      string             `json:"callablePackageName"`
	DependencyArtifactId     string             `json:"dependencyArtifactId"`
	DependencyGroupId        string             `json:"dependencyGroupId"`
	DependencyVersion        string             `json:"dependencyVersion"`
	MitigatedTriggerCount    int                `json:"mitigatedTriggerCount"`
	MitigationStrategy       MitigationStrategy `json:"mitigationStrategy"`
	NonmitigatedTriggerCount int                `json:"nonmitigatedTriggerCount"`
	TotalTriggerCount        int                `json:"totalTriggerCount"`
}

// ErrorResponsePayload defines model for ErrorResponsePayload.
type ErrorResponsePayload struct {
	Message string `json:"message"`
}

// GetDashboardVulnerabilitiesRequestPayload defines model for GetDashboardVulnerabilitiesRequestPayload.
type GetDashboardVulnerabilitiesRequestPayload struct {
	FromDateTime time.Time `json:"fromDateTime"`
	ToDateTime   time.Time `json:"toDateTime"`
}

// GetDashboardVulnerabilitiesResponsePayload defines model for GetDashboardVulnerabilitiesResponsePayload.
type GetDashboardVulnerabilitiesResponsePayload struct {
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// GetImpactGraphRequestPayload defines model for GetImpactGraphRequestPayload.
type GetImpactGraphRequestPayload struct {
	FromDateTime            time.Time `json:"fromDateTime"`
	ToDateTime              time.Time `json:"toDateTime"`
	VulnerabilityExternalId string    `json:"vulnerabilityExternalId"`
}

// GetImpactGraphResponsePayload defines model for GetImpactGraphResponsePayload.
type GetImpactGraphResponsePayload struct {
	Edges []ImpactGraphEdge `json:"edges"`
	Nodes []ImpactGraphNode `json:"nodes"`
}

// GetServiceMitigationsRequestPayload defines model for GetServiceMitigationsRequestPayload.
type GetServiceMitigationsRequestPayload struct {
	FromDateTime            time.Time `json:"fromDateTime"`
	ToDateTime              time.Time `json:"toDateTime"`
	VulnerabilityExternalId string    `json:"vulnerabilityExternalId"`
}

// GetServiceMitigationsResponsePayload defines model for GetServiceMitigationsResponsePayload.
type GetServiceMitigationsResponsePayload struct {
	Services []ServiceMitigation `json:"services"`
}

// GetVulnerabilityServicesRequestPayload defines model for GetVulnerabilityServicesRequestPayload.
type GetVulnerabilityServicesRequestPayload struct {
	FromDateTime            time.Time `json:"fromDateTime"`
	ToDateTime              time.Time `json:"toDateTime"`
	VulnerabilityExternalId string    `json:"vulnerabilityExternalId"`
}

// GetVulnerabilityServicesResponsePayload defines model for GetVulnerabilityServicesResponsePayload.
type GetVulnerabilityServicesResponsePayload struct {
	Services []Service `json:"services"`
}

// ImpactGraphEdge defines model for ImpactGraphEdge.
type ImpactGraphEdge struct {
	Label        string `json:"label"`
	SourceNodeId int    `json:"sourceNodeId"`
	TargetNodeId int    `json:"targetNodeId"`
}

// ImpactGraphNode defines model for ImpactGraphNode.
type ImpactGraphNode struct {
	Id           int    `json:"id"`
	IsVulnerable bool   `json:"isVulnerable"`
	ServiceName  string `json:"serviceName"`
}

// MitigationStrategy defines model for MitigationStrategy.
type MitigationStrategy string

// RequiredOperation defines model for RequiredOperation.
type RequiredOperation struct {
	Description string `json:"description"`
	Id          int    `json:"id"`
}

// Service Brief information about service, affected by the vulnerability
type Service struct {
	DependencyArtifactId    string               `json:"dependencyArtifactId"`
	DependencyGroupId       string               `json:"dependencyGroupId"`
	DependencyVersion       string               `json:"dependencyVersion"`
	EnabledMitigationsCount int                  `json:"enabledMitigationsCount"`
	RequiredOperations      *[]RequiredOperation `json:"requiredOperations,omitempty"`
	ServiceName             string               `json:"serviceName"`
	TriggerCount            int                  `json:"triggerCount"`
}

// ServiceMitigation defines model for ServiceMitigation.
type ServiceMitigation struct {
	Callables   []CallableMitigation `json:"callables"`
	ServiceId   int                  `json:"serviceId"`
	ServiceName string               `json:"serviceName"`
}

// Vulnerability Brief information about vulnerability, to be used in the dashboard table
type Vulnerability struct {
	ExternalId   string                `json:"externalId"`
	Severity     VulnerabilitySeverity `json:"severity"`
	TriggerCount int                   `json:"triggerCount"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// GetDashboardVulnerabilitiesJSONRequestBody defines body for GetDashboardVulnerabilities for application/json ContentType.
type GetDashboardVulnerabilitiesJSONRequestBody = GetDashboardVulnerabilitiesRequestPayload

// GetVulnerabilityServicesJSONRequestBody defines body for GetVulnerabilityServices for application/json ContentType.
type GetVulnerabilityServicesJSONRequestBody = GetVulnerabilityServicesRequestPayload

// GetImpactGraphJSONRequestBody defines body for GetImpactGraph for application/json ContentType.
type GetImpactGraphJSONRequestBody = GetImpactGraphRequestPayload

// ApplyMitigationStrategyJSONRequestBody defines body for ApplyMitigationStrategy for application/json ContentType.
type ApplyMitigationStrategyJSONRequestBody = ApplyMitigationStrategyRequestPayload

// GetServiceMitigationsJSONRequestBody defines body for GetServiceMitigations for application/json ContentType.
type GetServiceMitigationsJSONRequestBody = GetServiceMitigationsRequestPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of vulnerabilities for the dashboard
	// (POST /api/dashboard/getVulnerabilities)
	GetDashboardVulnerabilities(c *fiber.Ctx) error
	// Get list of services for the given vulnerability
	// (POST /api/details/getVulnerabilityServices)
	GetVulnerabilityServices(c *fiber.Ctx) error
	// Get impact graph for the given vulnerability
	// (POST /api/impact/getImpactGraph)
	GetImpactGraph(c *fiber.Ctx) error
	// Apply mitigation strategy to the given callable in the service
	// (POST /api/mitigation/applyMitigationStrategy)
	ApplyMitigationStrategy(c *fiber.Ctx) error
	// Get list of mitigations for the given vulnerability
	// (POST /api/mitigation/getVulnerabilityMitigations)
	GetServiceMitigations(c *fiber.Ctx) error
	// Check server liveness
	// (GET /liveness)
	GetLiveness(c *fiber.Ctx) error
	// Check server readiness
	// (GET /readiness)
	GetReadiness(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetDashboardVulnerabilities operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardVulnerabilities(c *fiber.Ctx) error {

	return siw.Handler.GetDashboardVulnerabilities(c)
}

// GetVulnerabilityServices operation middleware
func (siw *ServerInterfaceWrapper) GetVulnerabilityServices(c *fiber.Ctx) error {

	return siw.Handler.GetVulnerabilityServices(c)
}

// GetImpactGraph operation middleware
func (siw *ServerInterfaceWrapper) GetImpactGraph(c *fiber.Ctx) error {

	return siw.Handler.GetImpactGraph(c)
}

// ApplyMitigationStrategy operation middleware
func (siw *ServerInterfaceWrapper) ApplyMitigationStrategy(c *fiber.Ctx) error {

	return siw.Handler.ApplyMitigationStrategy(c)
}

// GetServiceMitigations operation middleware
func (siw *ServerInterfaceWrapper) GetServiceMitigations(c *fiber.Ctx) error {

	return siw.Handler.GetServiceMitigations(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *fiber.Ctx) error {

	return siw.Handler.GetLiveness(c)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *fiber.Ctx) error {

	return siw.Handler.GetReadiness(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/dashboard/getVulnerabilities", wrapper.GetDashboardVulnerabilities)

	router.Post(options.BaseURL+"/api/details/getVulnerabilityServices", wrapper.GetVulnerabilityServices)

	router.Post(options.BaseURL+"/api/impact/getImpactGraph", wrapper.GetImpactGraph)

	router.Post(options.BaseURL+"/api/mitigation/applyMitigationStrategy", wrapper.ApplyMitigationStrategy)

	router.Post(options.BaseURL+"/api/mitigation/getVulnerabilityMitigations", wrapper.GetServiceMitigations)

	router.Get(options.BaseURL+"/liveness", wrapper.GetLiveness)

	router.Get(options.BaseURL+"/readiness", wrapper.GetReadiness)

}

type GetDashboardVulnerabilitiesRequestObject struct {
	Body *GetDashboardVulnerabilitiesJSONRequestBody
}

type GetDashboardVulnerabilitiesResponseObject interface {
	VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error
}

type GetDashboardVulnerabilities200JSONResponse GetDashboardVulnerabilitiesResponsePayload

func (response GetDashboardVulnerabilities200JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetDashboardVulnerabilities400JSONResponse ErrorResponsePayload

func (response GetDashboardVulnerabilities400JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetDashboardVulnerabilities500JSONResponse ErrorResponsePayload

func (response GetDashboardVulnerabilities500JSONResponse) VisitGetDashboardVulnerabilitiesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetVulnerabilityServicesRequestObject struct {
	Body *GetVulnerabilityServicesJSONRequestBody
}

type GetVulnerabilityServicesResponseObject interface {
	VisitGetVulnerabilityServicesResponse(ctx *fiber.Ctx) error
}

type GetVulnerabilityServices200JSONResponse GetVulnerabilityServicesResponsePayload

func (response GetVulnerabilityServices200JSONResponse) VisitGetVulnerabilityServicesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetVulnerabilityServices400JSONResponse ErrorResponsePayload

func (response GetVulnerabilityServices400JSONResponse) VisitGetVulnerabilityServicesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetVulnerabilityServices500JSONResponse ErrorResponsePayload

func (response GetVulnerabilityServices500JSONResponse) VisitGetVulnerabilityServicesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetImpactGraphRequestObject struct {
	Body *GetImpactGraphJSONRequestBody
}

type GetImpactGraphResponseObject interface {
	VisitGetImpactGraphResponse(ctx *fiber.Ctx) error
}

type GetImpactGraph200JSONResponse GetImpactGraphResponsePayload

func (response GetImpactGraph200JSONResponse) VisitGetImpactGraphResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetImpactGraph400JSONResponse ErrorResponsePayload

func (response GetImpactGraph400JSONResponse) VisitGetImpactGraphResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetImpactGraph500JSONResponse ErrorResponsePayload

func (response GetImpactGraph500JSONResponse) VisitGetImpactGraphResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type ApplyMitigationStrategyRequestObject struct {
	Body *ApplyMitigationStrategyJSONRequestBody
}

type ApplyMitigationStrategyResponseObject interface {
	VisitApplyMitigationStrategyResponse(ctx *fiber.Ctx) error
}

type ApplyMitigationStrategy200Response struct {
}

func (response ApplyMitigationStrategy200Response) VisitApplyMitigationStrategyResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type ApplyMitigationStrategy400JSONResponse ErrorResponsePayload

func (response ApplyMitigationStrategy400JSONResponse) VisitApplyMitigationStrategyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type ApplyMitigationStrategy500JSONResponse ErrorResponsePayload

func (response ApplyMitigationStrategy500JSONResponse) VisitApplyMitigationStrategyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetServiceMitigationsRequestObject struct {
	Body *GetServiceMitigationsJSONRequestBody
}

type GetServiceMitigationsResponseObject interface {
	VisitGetServiceMitigationsResponse(ctx *fiber.Ctx) error
}

type GetServiceMitigations200JSONResponse GetServiceMitigationsResponsePayload

func (response GetServiceMitigations200JSONResponse) VisitGetServiceMitigationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetServiceMitigations400JSONResponse ErrorResponsePayload

func (response GetServiceMitigations400JSONResponse) VisitGetServiceMitigationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetServiceMitigations500JSONResponse ErrorResponsePayload

func (response GetServiceMitigations500JSONResponse) VisitGetServiceMitigationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetLivenessRequestObject struct {
}

type GetLivenessResponseObject interface {
	VisitGetLivenessResponse(ctx *fiber.Ctx) error
}

type GetLiveness200Response struct {
}

func (response GetLiveness200Response) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetReadinessRequestObject struct {
}

type GetReadinessResponseObject interface {
	VisitGetReadinessResponse(ctx *fiber.Ctx) error
}

type GetReadiness200Response struct {
}

func (response GetReadiness200Response) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetReadiness500Response struct {
}

func (response GetReadiness500Response) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of vulnerabilities for the dashboard
	// (POST /api/dashboard/getVulnerabilities)
	GetDashboardVulnerabilities(ctx context.Context, request GetDashboardVulnerabilitiesRequestObject) (GetDashboardVulnerabilitiesResponseObject, error)
	// Get list of services for the given vulnerability
	// (POST /api/details/getVulnerabilityServices)
	GetVulnerabilityServices(ctx context.Context, request GetVulnerabilityServicesRequestObject) (GetVulnerabilityServicesResponseObject, error)
	// Get impact graph for the given vulnerability
	// (POST /api/impact/getImpactGraph)
	GetImpactGraph(ctx context.Context, request GetImpactGraphRequestObject) (GetImpactGraphResponseObject, error)
	// Apply mitigation strategy to the given callable in the service
	// (POST /api/mitigation/applyMitigationStrategy)
	ApplyMitigationStrategy(ctx context.Context, request ApplyMitigationStrategyRequestObject) (ApplyMitigationStrategyResponseObject, error)
	// Get list of mitigations for the given vulnerability
	// (POST /api/mitigation/getVulnerabilityMitigations)
	GetServiceMitigations(ctx context.Context, request GetServiceMitigationsRequestObject) (GetServiceMitigationsResponseObject, error)
	// Check server liveness
	// (GET /liveness)
	GetLiveness(ctx context.Context, request GetLivenessRequestObject) (GetLivenessResponseObject, error)
	// Check server readiness
	// (GET /readiness)
	GetReadiness(ctx context.Context, request GetReadinessRequestObject) (GetReadinessResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetDashboardVulnerabilities operation middleware
func (sh *strictHandler) GetDashboardVulnerabilities(ctx *fiber.Ctx) error {
	var request GetDashboardVulnerabilitiesRequestObject

	var body GetDashboardVulnerabilitiesJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetDashboardVulnerabilities(ctx.UserContext(), request.(GetDashboardVulnerabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDashboardVulnerabilities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetDashboardVulnerabilitiesResponseObject); ok {
		if err := validResponse.VisitGetDashboardVulnerabilitiesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVulnerabilityServices operation middleware
func (sh *strictHandler) GetVulnerabilityServices(ctx *fiber.Ctx) error {
	var request GetVulnerabilityServicesRequestObject

	var body GetVulnerabilityServicesJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetVulnerabilityServices(ctx.UserContext(), request.(GetVulnerabilityServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVulnerabilityServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetVulnerabilityServicesResponseObject); ok {
		if err := validResponse.VisitGetVulnerabilityServicesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetImpactGraph operation middleware
func (sh *strictHandler) GetImpactGraph(ctx *fiber.Ctx) error {
	var request GetImpactGraphRequestObject

	var body GetImpactGraphJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetImpactGraph(ctx.UserContext(), request.(GetImpactGraphRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImpactGraph")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetImpactGraphResponseObject); ok {
		if err := validResponse.VisitGetImpactGraphResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApplyMitigationStrategy operation middleware
func (sh *strictHandler) ApplyMitigationStrategy(ctx *fiber.Ctx) error {
	var request ApplyMitigationStrategyRequestObject

	var body ApplyMitigationStrategyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ApplyMitigationStrategy(ctx.UserContext(), request.(ApplyMitigationStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApplyMitigationStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ApplyMitigationStrategyResponseObject); ok {
		if err := validResponse.VisitApplyMitigationStrategyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetServiceMitigations operation middleware
func (sh *strictHandler) GetServiceMitigations(ctx *fiber.Ctx) error {
	var request GetServiceMitigationsRequestObject

	var body GetServiceMitigationsJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceMitigations(ctx.UserContext(), request.(GetServiceMitigationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceMitigations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetServiceMitigationsResponseObject); ok {
		if err := validResponse.VisitGetServiceMitigationsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLiveness operation middleware
func (sh *strictHandler) GetLiveness(ctx *fiber.Ctx) error {
	var request GetLivenessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLiveness(ctx.UserContext(), request.(GetLivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLiveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLivenessResponseObject); ok {
		if err := validResponse.VisitGetLivenessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReadiness operation middleware
func (sh *strictHandler) GetReadiness(ctx *fiber.Ctx) error {
	var request GetReadinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReadiness(ctx.UserContext(), request.(GetReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReadiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadinessResponseObject); ok {
		if err := validResponse.VisitGetReadinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

openapi: 3.0.3
info:
  title: Vulnerability Tracer Service
  description: Vulnerability Tracer Service
  version: 0.1.0
servers:
  - url: 'http://localhost:10420'
paths:
  /liveness:
    get:
      summary: Check server liveness
      description: >
        Liveness endpoint is used by Kubernetes to determine 
        if the application after startup is still able to serve the requests
      responses:
        200:
          description: Application is running correctly
        500:
          description: Application has a problem that can lead to response errors
  /readiness:
    get:
      summary: Check server readiness
      description: >
        Readiness endpoint is used by Kubernetes to determine 
        if the application finished startup and can serve requests
      responses:
        200:
          description: Application can serve requests
  /api/register:
    post:
      summary: Register service and get vulnerable callables for the microservice
      description: >
        Get vulnerable callables for the microservice and its dependencies,passed as Maven coordinates. 
        Also registers the service if it wasn't registered before, to track the vulnerabilities in its dependencies.
      requestBody:
        description: >
          Microservice's unique identifier and Maven coordinates of its dependencies.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              serviceName: 'my-microservice'
              dependencies:
                - groupId: 'dom4j'
                  artifactId: 'dom4j'
                  version: '1.6.1'
      responses:
        200:
          description: >
            List of service's vulnerable callables, together with their mitigation strategies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    MavenCoordinates:
      title: Maven coordinates
      type: object
      required:
        - groupId
        - artifactId
        - version
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        version:
          type: string
    JavaCallable:
      title: Vulnerable Java callable
      type: object
      required:
        - packageName
        - className
        - methodName
        - mitigationStrategy
      properties:
        packageName:
          type: string
        className:
          type: string
        methodName:
          type: string
        mitigationStrategy:
          type: string
          enum:
            - 'NoneMitigationStrategy'
            - 'ErrorMitigationStrategy'
            - 'NoOpMitigationStrategy'
    RegisterRequest:
      title: Register request
      type: object
      required:
        - serviceName
        - dependencies
      properties:
        serviceName:
          description: Name of the service to register
          type: string
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/MavenCoordinates'
    RegisterResponse:
      title: Register response
      type: object
      properties:
        callables:
          type: array
          items:
            $ref: '#/components/schemas/JavaCallable'
    ErrorResponse:
      title: Descriptive error response
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: "Error has occurred"
package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service;

import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.dto.CallableDTO;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.exceptions.MalformedFastenObjectException;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.report.VulnerabilityReport;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.report.VulnerableCallable;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.utils.FastenMetadataUtils;
import org.gradle.api.logging.Logger;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Set;

public class ReportService {

    private Logger logger;

    public ReportService(Logger logger) {
        this.logger = logger;
    }

    public VulnerabilityReport generateReport(Set<CallableDTO> callables) {
        var vulnerableCallables = new ArrayList<VulnerableCallable>();

        int successCount = 0;
        int errorCount = 0;

        for (var callable : callables) {
            try {
                vulnerableCallables.add(buildVulnerabilityCallable(callable));
                successCount++;
            } catch (MalformedFastenObjectException e) {
                logger.warn("Malformed callable was not added to the report: {}", e.getMessage());
                errorCount++;
            }
        }

        if (errorCount == 0) {
            logger.quiet("Generated report with {} callables", successCount);
        } else {
            logger.quiet("Generated report with {}/{} callables", successCount, callables.size());
            logger.quiet("{} callables were malformed and were skipped. Check logs for details.", errorCount);
        }

        var report = new VulnerabilityReport();
        report.setGenerationTime(ZonedDateTime.now());
        report.setCallables(vulnerableCallables);
        return report;
    }

    private VulnerableCallable buildVulnerabilityCallable(CallableDTO callableDTO) throws MalformedFastenObjectException {
        var packageName = FastenMetadataUtils.extractPackage(callableDTO.getFastenUri());
        var classAndMethodNames = FastenMetadataUtils.extractClassAndMethodName(callableDTO);
        var vulnerabilities = FastenMetadataUtils.extractVulnerabilityIds(callableDTO);
        var maxSeverity = FastenMetadataUtils.determineHighestSeverity(callableDTO);

        var vulnerabilityCallable = new VulnerableCallable();
        vulnerabilityCallable.setId(callableDTO.getFastenUri());
        vulnerabilityCallable.setPackageName(packageName);
        vulnerabilityCallable.setClassName(classAndMethodNames.getClassName());
        vulnerabilityCallable.setMethodName(classAndMethodNames.getMethodName());
        vulnerabilityCallable.setVulnerabilityIds(vulnerabilities);
        vulnerabilityCallable.setSeverity(maxSeverity);
        return vulnerabilityCallable;
    }

}

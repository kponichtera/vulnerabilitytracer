package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service;

import com.fasterxml.jackson.core.type.TypeReference;
import lombok.SneakyThrows;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.dto.VulnerabilityDTO;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.utils.FastenApiMapperUtils;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;

public class FastenApiService {

    private String apiUrl;
    private HttpClient client;

    public FastenApiService(String apiUrl, int executorThreadCount) {
        this.apiUrl = apiUrl;
        this.client = HttpClient.newBuilder()
                .executor(Executors.newFixedThreadPool(executorThreadCount))
                .build();
    }

    public CompletableFuture<List<VulnerabilityDTO>> getVulnerabilities(String packageName,
                                                                        String artifactName,
                                                                        String version) {
        var request = HttpRequest.newBuilder(buildApiUri("api/mvn/packages/%s:%s/%s/vulnerabilities", packageName, artifactName, version))
                .GET()
                .build();

        return sendAsyncAndDeserialize(request);
    }

    @SneakyThrows
    private URI buildApiUri(String pathFormat, String... args) {
        return new URI(String.format(this.apiUrl + "/" + pathFormat, (Object[]) args));
    }

    private <T> CompletableFuture<T> sendAsyncAndDeserialize(HttpRequest request) {
        return this.client.sendAsync(request, HttpResponse.BodyHandlers.ofInputStream())
                .thenApply(response -> {
                    try {
                        return FastenApiMapperUtils.getMapper().readValue(response.body(), new TypeReference<T>() {
                        });
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
    }
}

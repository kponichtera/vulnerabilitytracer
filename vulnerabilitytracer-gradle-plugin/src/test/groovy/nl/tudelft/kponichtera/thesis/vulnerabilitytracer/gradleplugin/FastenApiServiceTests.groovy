package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin

import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.FastenApiService
import org.mockserver.integration.ClientAndServer
import org.mockserver.model.HttpRequest
import org.mockserver.model.HttpResponse
import spock.lang.Shared
import spock.lang.Specification

class FastenApiServiceTests extends Specification {

    @Shared
    private mockServerClient = ClientAndServer.startClientAndServer()

    def cleanupSpec() {
        mockServerClient.stop()
    }

    def "making vulnerability request works"() {
        given:
        mockVulnerabilitiesResponse()
        def port = mockServerClient.port
        def service = new FastenApiService("http://localhost:$port", 1)

        and:
        def packageName = "org.latencyutils"
        def artifactName = "LatencyUtils"
        def packageVersion = "2.0.3"

        when:
        def vulnerabilityList = service.getVulnerabilities(packageName, artifactName, packageVersion).get()

        then:
        !vulnerabilityList.empty

        cleanup:
        mockServerClient.reset()
    }

    private mockVulnerabilitiesResponse() {
        mockServerClient.when(
                HttpRequest.request()
                        .withMethod("GET")
                        .withPath("/api/mvn/packages/org.latencyutils:LatencyUtils/2.0.3/vulnerabilities")
        ).respond(
                HttpResponse.response()
                        .withStatusCode(200)
                        .withBody("""
                            [{
                                "id": 12345,
                                "external_id": "a1b2c3d4e5",
                                "statement": {
                                }
                            }]
                        """)
        )
    }

}

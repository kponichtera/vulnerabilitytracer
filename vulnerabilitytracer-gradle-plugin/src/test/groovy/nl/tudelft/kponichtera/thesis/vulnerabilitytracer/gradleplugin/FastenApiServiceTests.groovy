package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin

import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.FastenApiService
import org.mockserver.integration.ClientAndServer
import org.mockserver.model.HttpRequest
import org.mockserver.model.HttpResponse
import spock.lang.Shared
import spock.lang.Specification

class FastenApiServiceTests extends Specification {

    @Shared
    private mockServerClient = ClientAndServer.startClientAndServer()

    def cleanupSpec() {
        mockServerClient.stop()
    }

    def "making vulnerability request works"() {
        given:
        mockVulnerabilitiesResponse()
        def port = mockServerClient.port
        def service = new FastenApiService("http://localhost:$port", 1)

        and:
        def groupName = "org.latencyutils"
        def artifactName = "LatencyUtils"
        def packageVersion = "2.0.3"

        when:
        def vulnerabilities = service.getVulnerabilities(groupName, artifactName, packageVersion).get()

        then:
        !vulnerabilities.empty
        vulnerabilities[0].externalId() != null

        cleanup:
        mockServerClient.reset()
    }

    def "making vulnerability callables request works"() {
        given:
        mockVulnerabilityCallablesResponse()
        def port = mockServerClient.port
        def service = new FastenApiService("http://localhost:$port", 1)

        and:
        def vulnerabilityId = "CVE-2019-3797"

        when:
        def callables = service.getVulnerabilityCallables(vulnerabilityId).get()

        then:
        !callables.empty
        callables[0].fastenUri() != null

        cleanup:
        mockServerClient.reset()
    }

    def "making callables request works"() {
        given:
        mockCallablesResponse()
        def port = mockServerClient.port
        def service = new FastenApiService("http://localhost:$port", 1)

        when:
        def callables = service.getCallables(callableIds).get()

        then:
        !callables.isEmpty()
        callables[32548L].fastenUri() != null
        callables[32548L].metadata().quality().callableName() != null

        cleanup:
        mockServerClient.reset()

        where:
        callableIds              | _
        [32548L]                 | _
        [32548L, 23456L, 34567L] | _
    }

    private mockVulnerabilitiesResponse() {
        mockServerClient.when(
                HttpRequest.request()
                        .withMethod("GET")
                        .withPath("/api/mvn/packages/org.latencyutils:LatencyUtils/2.0.3/vulnerabilities")
        ).respond(
                HttpResponse.response()
                        .withStatusCode(200)
                        .withBody("""
                            [{
                                "id": 12345,
                                "external_id": "CVE-2019-3797"
                            }]
                        """)
        )
    }

    private mockVulnerabilityCallablesResponse() {
        mockServerClient.when(
                HttpRequest.request()
                        .withMethod("GET")
                        .withPath("/api/vulnerabilities/CVE-2019-3797/callables")
        ).respond(
                HttpResponse.response()
                        .withStatusCode(200)
                        .withBody("""
                            [{
                                "fasten_uri": "/org.springframework.data.repository.query.parser/PartTree.isDistinct()%2Fjava.lang%2FBooleanType",
                                "callable_id": 33392
                            }]
                        """)
        )
    }

    private mockCallablesResponse() {
        mockServerClient.when(
                HttpRequest.request()
                        .withMethod("POST")
                        .withPath("/api/mvn/callables")
        ).respond(
                HttpResponse.response()
                        .withStatusCode(200)
                        .withBody("""
                            {
                                "32548": {
                                    "is_internal_call": true,
                                    "metadata": {
                                        "quality": {
                                            "quality_analysis_timestamp": "1676462882.74734",
                                            "callable_long_name": "JpaSort::JpaOrder::isIgnoreCase()",
                                            "quality_analyzer_version": "1.17.10",
                                            "callable_parameters": [],
                                            "rapid_plugin_version": "1.3.0",
                                            "metrics": {
                                                "nloc": 3,
                                                "complexity": 2,
                                                "token_count": 14,
                                                "parameter_count": 0,
                                                "length": 3
                                            },
                                            "quality_analyzer_name": "Lizard",
                                            "rapid_metadata_plugin_version": "1.2.2",
                                            "callable_name": "JpaSort::JpaOrder::isIgnoreCase"
                                      }
                                  },
                                  "module_id": 4576,
                                  "line_start": 411,
                                  "fasten_uri": "/org.springframework.data.jpa.domain/JpaSort\$JpaOrder.isIgnoreCase()%2Fjava.lang%2FBooleanType",
                                  "line_end": 411
                                }
                            }
                        """)
        )
    }

}

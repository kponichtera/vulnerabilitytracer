package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin

import groovy.util.logging.Slf4j
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.dto.VulnerabilityDTO
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.CacheService
import spock.lang.Specification
import spock.lang.TempDir

import java.nio.file.Path

@Slf4j
class CacheServiceTests extends Specification {

    @TempDir
    File tempDirectory

    def "cache directory is created"() {
        given:
        def cacheService = new CacheService(tempDirectory, log)

        when:
        cacheService.ensureCacheDir()

        and:
        def cacheDirectory = Path.of(tempDirectory.getAbsolutePath(), CacheService.CACHE_DIRECTORY)

        then:
        cacheDirectory.toFile().exists()
    }

    def "cache directory is pruned"() {
        given:
        def cacheRootDirectoryPath = tempDirectory.getPath()

        and:
        def cacheService = new CacheService(tempDirectory, log)
        cacheService.ensureCacheDir()

        when:
        cacheService.pruneCache()

        and:
        def cacheDirectory = Path.of(cacheRootDirectoryPath, CacheService.CACHE_DIRECTORY)

        then:
        !cacheDirectory.toFile().exists()
    }

    def "caching vulnerabilities works"() {
        given:
        def packageName = "org.latencyutils"
        def artifactName = "LatencyUtils"
        def packageVersion = "2.0.3"
        def vulnerabilities = mockVulnerabilitiesList()

        and:
        def cacheService = new CacheService(tempDirectory, log)

        when:
        def cachedFile = cacheService.saveToCache(packageName, artifactName, packageVersion, vulnerabilities)

        and:
        def cachedFilePath = cachedFile.getAbsolutePath()

        then:
        cachedFile.exists()
        cachedFilePath.contains(packageName)
        cachedFilePath.contains(artifactName)
        cachedFilePath.contains(packageVersion)
        cachedFilePath.endsWith(CacheService.VULNERABILITIES_FILENAME)
    }

    def "reading cached vulnerabilities works"() {
        given:
        def packageName = "org.latencyutils"
        def artifactName = "LatencyUtils"
        def packageVersion = "2.0.3"
        def vulnerabilities = mockVulnerabilitiesList()

        and:
        def cacheService = new CacheService(tempDirectory, log)
        cacheService.saveToCache(packageName, artifactName, packageVersion, vulnerabilities)

        when:
        def cachedVulnerabilities = cacheService.getVulnerabilitiesFromCache(packageName, artifactName, packageVersion)

        then:
        cachedVulnerabilities.isPresent()
        cachedVulnerabilities.get().size() == vulnerabilities.size()
    }

    def "reading non-cached vulnerabilities returns empty response"() {
        given:
        def packageName = "org.latencyutils"
        def artifactName = "LatencyUtils"
        def packageVersion = "2.0.3"

        and:
        def cacheService = new CacheService(tempDirectory, log)

        when:
        def cachedVulnerabilities = cacheService.getVulnerabilitiesFromCache(packageName, artifactName, packageVersion)

        then:
        cachedVulnerabilities.isEmpty()
    }

    private mockVulnerabilitiesList() {
        return [
                new VulnerabilityDTO(1 as BigInteger, "a1b2c3d4"),
                new VulnerabilityDTO(2 as BigInteger, "b2c3d4e5"),
                new VulnerabilityDTO(3 as BigInteger, "c3d4e5f6")
        ]
    }

}

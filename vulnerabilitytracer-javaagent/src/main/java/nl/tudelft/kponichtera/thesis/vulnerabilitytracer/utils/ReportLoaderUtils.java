package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.experimental.UtilityClass;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.DependencyCheckReport;

import java.io.File;
import java.io.IOException;
import java.util.Optional;

@UtilityClass
public class ReportLoaderUtils {

    private static final String REPORT_PATH_ENV_VARIABLE = "DEPENDENCYCHECK_REPORT_PATH";
    private static final String REPORT_DEFAULT_NAME = "dependency-check-report.json";

    public static Optional<DependencyCheckReport> loadReport() throws IOException {
        var reportPath = System.getenv(REPORT_PATH_ENV_VARIABLE);
        if (reportPath == null) {
            reportPath = REPORT_DEFAULT_NAME;
        }

        File reportFile = new File(reportPath);
        if (!reportFile.exists()) {
            return Optional.empty();
        }

        return Optional.of(loadReport(reportFile));
    }

    public static DependencyCheckReport loadReport(File reportFile) throws IOException {
        var mapper = createObjectMapper();
        return mapper.readValue(reportFile, DependencyCheckReport.class);
    }

    private static ObjectMapper createObjectMapper() {
        var objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        return objectMapper;
    }

}

package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.instrumentation;

import com.google.auto.service.AutoService;
import io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule;
import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import lombok.extern.java.Log;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerabilityReport;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportLoaderUtils;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Log
@AutoService(InstrumentationModule.class)
public class VulnerabilityTracerInstrumentationModule extends InstrumentationModule {

    private Optional<VulnerabilityReport> reportOptional;

    public VulnerabilityTracerInstrumentationModule() {
        super("vulnerability-tracer");
        try {
            reportOptional = ReportLoaderUtils.loadReport();
        } catch (IOException e) {
            log.warning("Error when loading the vulnerability report - skipping instrumentation");
            e.printStackTrace();
        }
    }

    @Override
    public List<TypeInstrumentation> typeInstrumentations() {
        if (reportOptional.isEmpty()) {
            log.info("No report loaded - skipping instrumentation");
            return Collections.emptyList();
        }

        var report = reportOptional.get();
        if (report.getCallables().isEmpty()) {
            log.info("Report loaded with no vulnerable callables - skipping instrumentation");
            return Collections.emptyList();
        }

        log.info(String.format("Report loaded with %d vulnerable callables - loading instrumentation", report.getCallables().size()));
        return Collections.singletonList(new VulnerabilityTracerInstrumentation(report));
    }

}

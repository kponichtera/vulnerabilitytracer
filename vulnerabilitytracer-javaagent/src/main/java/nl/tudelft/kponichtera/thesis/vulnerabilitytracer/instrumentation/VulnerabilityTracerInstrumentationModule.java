package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.instrumentation;

import com.google.auto.service.AutoService;
import io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule;
import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import lombok.extern.java.Log;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerabilityReport;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerableCallable;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportLoaderUtils;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Log
@AutoService(InstrumentationModule.class)
public class VulnerabilityTracerInstrumentationModule extends InstrumentationModule {

    private Optional<VulnerabilityReport> reportOptional = Optional.empty();

    public VulnerabilityTracerInstrumentationModule() {
        super("vulnerability-tracer");
        try {
            reportOptional = ReportLoaderUtils.loadReport();
        } catch (IOException e) {
            log.warning("Error when loading the vulnerability report - skipping instrumentation");
            e.printStackTrace();
        }
    }

    @Override
    public boolean isHelperClass(String className) {
        return className.startsWith("nl.tudelft.kponichtera.thesis.vulnerabilitytracer.");
    }

    @Override
    public List<TypeInstrumentation> typeInstrumentations() {
        if (reportOptional.isEmpty()) {
            log.info("No report loaded - skipping instrumentation");
            return Collections.singletonList(new NoOpInstrumentation());
        }

        var report = reportOptional.get();
        if (report.getCallables().isEmpty()) {
            log.info("Report loaded with no vulnerable callables - skipping instrumentation");
            return Collections.singletonList(new NoOpInstrumentation());
        }

        log.info(String.format("Report loaded with %d vulnerable callables - loading instrumentation", report.getCallables().size()));
        return buildTypeInstrumentations(report.getCallables());
    }

    private List<TypeInstrumentation> buildTypeInstrumentations(List<VulnerableCallable> callables) {
        var instrumentations = new ArrayList<TypeInstrumentation>();
        var callableMappings = ReportUtils.extractCallablesForClasses(callables);
        for (var entry : callableMappings.entrySet()) {
            var className = entry.getKey();
            var classCallables = entry.getValue();

            log.info(String.format("Building instrumentation for %d callables in class %s", classCallables.size(), className));
            instrumentations.add(new VulnerabilityTracerInstrumentation(className, classCallables));
        }

        return instrumentations;
    }

}

package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.helper;

import lombok.experimental.UtilityClass;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.exception.MissingReportException;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerableCallable;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportLoaderUtils;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportUtils;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@UtilityClass
public class VulnerabilityHolderHelper {

    private static Map<String, List<VulnerableCallable>> staticCallablesHolder;

    public static Map<String, List<VulnerableCallable>> initializeStaticHolder() throws IOException {
        if (staticCallablesHolder != null) return staticCallablesHolder;
        staticCallablesHolder = initializeHolder();
        return staticCallablesHolder;
    }

    public static Map<String, List<VulnerableCallable>> initializeHolder() throws IOException {
        var report = ReportLoaderUtils.loadReport();
        if (report.isEmpty()) {
            throw new MissingReportException("Vulnerability report not found");
        }

        return ReportUtils.extractCallablesForClasses(report.get().getCallables());
    }

}

package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.instrumentation;

import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import io.opentelemetry.javaagent.extension.instrumentation.TypeTransformer;
import net.bytebuddy.asm.Advice;
import net.bytebuddy.description.type.TypeDescription;
import net.bytebuddy.matcher.ElementMatcher;
import net.bytebuddy.matcher.ElementMatchers;

public class VulnerabilityTracerInstrumentation implements TypeInstrumentation {

    public VulnerabilityTracerInstrumentation() {
        // TODO: Receive the packages
    }

    /**
     * Matches types from the vulnerable packages from the vulnerable libraries.
     *
     * @return
     */
    @Override
    public ElementMatcher<TypeDescription> typeMatcher() {
        // TODO: Match all packages from the vulnerable libraries
        return ElementMatchers.none();
    }

    /**
     * Loads the instrumentation whenever the OWASP DependencyCheck report is present
     *
     * @return
     */
    @Override
    public ElementMatcher<ClassLoader> classLoaderOptimization() {
        // TODO - Check if the report file is available. Read it in the constructor, not here!
        return ElementMatchers.any();
    }

    /**
     * Applies advice to every method from the vulnerable library packages.
     *
     * @param transformer
     */
    @Override
    public void transform(TypeTransformer transformer) {
        transformer.applyAdviceToMethod(
                ElementMatchers.any(),
                this.getClass().getName() + "$VulnerabilityTracerAdvice"
        );
    }

    @SuppressWarnings("unused")
    public static class VulnerabilityTracerAdvice {

        @Advice.OnMethodEnter
        public static void onEnter() {
            // TODO: Add the vulnerability to the span
        }

    }
}

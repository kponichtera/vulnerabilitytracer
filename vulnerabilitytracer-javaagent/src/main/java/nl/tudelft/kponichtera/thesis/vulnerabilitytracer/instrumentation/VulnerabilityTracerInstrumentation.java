package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.instrumentation;

import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import io.opentelemetry.javaagent.extension.instrumentation.TypeTransformer;
import io.opentelemetry.javaagent.extension.matcher.AgentElementMatchers;
import lombok.extern.java.Log;
import net.bytebuddy.asm.Advice;
import net.bytebuddy.description.type.TypeDescription;
import net.bytebuddy.matcher.ElementMatcher;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerableCallable;

import java.util.List;

import static net.bytebuddy.matcher.ElementMatchers.hasSuperType;
import static net.bytebuddy.matcher.ElementMatchers.named;

@Log
public class VulnerabilityTracerInstrumentation implements TypeInstrumentation {

    private final String className;
    private final List<VulnerableCallable> callables;

    public VulnerabilityTracerInstrumentation(String className, List<VulnerableCallable> callables) {
        this.className = className;
        this.callables = callables;
    }

    @Override
    public ElementMatcher<TypeDescription> typeMatcher() {
        return named(className).or(hasSuperType(named(className)));
    }


    /**
     * Check if classes to be instrumented even exist (to avoid wasting resources on false positives).
     *
     * @return
     */
    @Override
    public ElementMatcher<ClassLoader> classLoaderOptimization() {
        return AgentElementMatchers.hasClassesNamed(className);
    }

    /**
     * Applies advice to every method from the vulnerable library packages.
     *
     * @param transformer
     */
    @Override
    public void transform(TypeTransformer transformer) {
        for (var callable : callables) {
            transformer.applyAdviceToMethod(
                    named(callable.getMethodName()),
                    VulnerabilityTracerInstrumentation.class.getName() + "$VulnerabilityTracerAdvice"
            );
        }

    }

    /*
     * Rules to follow when writing advices:
     * https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/contributing/writing-instrumentation-module.md#use-advice-classes-to-write-code-that-will-get-injected-to-the-instrumented-library-classes
     */
    @SuppressWarnings("unused")
    public static class VulnerabilityTracerAdvice {

        @Advice.OnMethodEnter(suppress = Throwable.class)
        public static void onEnter(@Advice.Origin("#m") String methodName,
                                   @Advice.Origin("#t") String typeName
        ) {
            System.out.printf("Method entered: %s.%s%n", typeName, methodName);
            // TODO: Add the vulnerability to the span
        }

    }
}

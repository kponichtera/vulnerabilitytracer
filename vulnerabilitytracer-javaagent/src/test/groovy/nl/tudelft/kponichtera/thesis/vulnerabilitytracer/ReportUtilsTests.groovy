package nl.tudelft.kponichtera.thesis.vulnerabilitytracer

import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.enums.Severity
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerableCallable
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.ReportUtils
import spock.lang.Specification

class ReportUtilsTests extends Specification {

    def "extracting callables for classes returns collection of reduced size"() {
        given:
        def callables = makeCallables()

        when:
        def classCallableMap = ReportUtils.extractCallablesForClasses(callables)

        then:
        classCallableMap.size() < callables.size()
    }

    def "extracting callables for classes contains instrumentation-friendly class name"() {
        given:
        def callables = makeCallables()

        when:
        def classCallableMap = ReportUtils.extractCallablesForClasses(callables)

        then:
        classCallableMap.containsKey("com.fasterxml.jackson.databind.deser.std.StdDeserializer")
    }

    def "converting OpenTelemetry method name format to FASTEN API works"() {
        when:
        def fastenMethodName = ReportUtils.fromOpentelemetryToFastenMethodName(otelClassName, otelMethodName)

        then:
        fastenMethodName == expectedFastenMethodName

        where:
        otelClassName                                              | otelMethodName | expectedFastenMethodName
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer" | "mapObject"    | "mapObject"
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer" | "<init>"       | "StdDeserializer"
    }

    def "checking if FASTEN method id constructor works properly"() {
        when:
        def isConstructor = ReportUtils.isConstructor(fastenClassName, fastenMethodName);

        then:
        isConstructor == expectedResult

        where:
        fastenClassName                                            | fastenMethodName  | expectedResult
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer" | "mapObject"       | false
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer" | "StdDeserializer" | true
        "StdDeserializer"                                          | "StdDeserializer" | true
        "UntypedObjectDeserializer"                                | "StdDeserializer" | false
    }

    private def makeCallables() {
        def list = new ArrayList<VulnerableCallable>()
        list.add(new VulnerableCallable(
                "/com.fasterxml.jackson.databind.deser.std/StdDeserializer._parseLong(%2Fcom.fasterxml.jackson.core%2FJsonParser,%2Fcom.fasterxml.jackson.databind%2FDeserializationContext,%2Fjava.lang%2FClass)%2Fjava.lang%2FLong",
                "com.fasterxml.jackson.databind.deser.std",
                "StdDeserializer",
                "_parseLong",
                Set.of("CVE-2022-42004", "CVE-2022-42003"),
                Severity.HIGH
        ))
        list.add(new VulnerableCallable(
                "/com.fasterxml.jackson.databind.deser.std/StdDeserializer._parseDoublePrimitive(%2Fcom.fasterxml.jackson.core%2FJsonParser,%2Fcom.fasterxml.jackson.databind%2FDeserializationContext)%2Fjava.lang%2FDoubleType",
                "com.fasterxml.jackson.databind.deser.std",
                "StdDeserializer",
                "_parseDoublePrimitive",
                Set.of("CVE-2022-42003"),
                Severity.HIGH
        ))
        list.add(new VulnerableCallable(
                "/com.fasterxml.jackson.databind.deser.std/UntypedObjectDeserializer\$Vanilla.mapObject(%2Fcom.fasterxml.jackson.core%2FJsonParser,%2Fcom.fasterxml.jackson.databind%2FDeserializationContext,%2Fjava.lang%2FIntegerType)%2Fjava.lang%2FObject",
                "com.fasterxml.jackson.databind.deser.std",
                "UntypedObjectDeserializer.Vanilla",
                "mapObject",
                Set.of("CVE-2022-42003"),
                Severity.HIGH
        ))
        return list
    }

}

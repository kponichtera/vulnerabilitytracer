package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils;

import lombok.experimental.UtilityClass;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.config.VulnerabilityTracerAgentConfig;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.DependencyReport;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;

/*
 * TODO: Refactor to read the file, generated by the Gradle plugin.
 */
@UtilityClass
public class ReportLoaderUtils {

    public static Optional<DependencyReport> loadReport() throws IOException {
        var reportPath = VulnerabilityTracerAgentConfig.getReportPath();

        // Try to load report from provided (or default) path
        var reportFile = new File(reportPath);
        if (reportFile.exists()) {
            return Optional.of(loadReport(reportFile));
        }

        // No report file found anywhere
        return Optional.empty();
    }

    public static DependencyReport loadReport(File reportFile) throws IOException {
        return ReportMapperUtils.getMapper().readValue(reportFile, DependencyReport.class);
    }

    public static DependencyReport loadReport(InputStream reportInputStream) throws IOException {
        return ReportMapperUtils.getMapper().readValue(reportInputStream, DependencyReport.class);
    }

}

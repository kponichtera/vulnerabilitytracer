package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.instrumentation.advice;

import io.opentelemetry.context.Context;
import io.opentelemetry.context.Scope;
import net.bytebuddy.asm.Advice;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.exception.VulnerabilityHolderException;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils.AdviceUtils;

import java.io.IOException;

/**
 * Rules to follow when writing advices:
 * https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/contributing/writing-instrumentation-module.md#use-advice-classes-to-write-code-that-will-get-injected-to-the-instrumented-library-classes
 */
@SuppressWarnings("unused")
public final class NoopMitigationAdvice {

    @Advice.OnMethodEnter
    public static void onEnter(@Advice.Origin("#m") String methodName,
                               @Advice.Origin("#t") String typeName,
                               @Advice.Local("otelContext") Context context,
                               @Advice.Local("otelScope") Scope scope
    ) throws VulnerabilityHolderException {
        var callable = AdviceUtils.getCallableMetadata(methodName, typeName);
        AdviceUtils.addEventsToSpan(callable);
    }

}

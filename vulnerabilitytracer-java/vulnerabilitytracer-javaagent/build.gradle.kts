plugins {
    groovy
    java
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.opentelemetry.instrumentation.muzzle-generation") version "1.23.0-alpha"
    id("io.opentelemetry.instrumentation.muzzle-check") version "1.23.0-alpha"
    id("org.openapi.generator") version "7.2.0"
}

repositories {
    mavenCentral()
}

val otelAgent by configurations.creating

dependencies {
    implementation(platform("io.opentelemetry:opentelemetry-bom:1.23.0"))
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:1.23.0"))
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.23.0-alpha"))
    implementation("com.fasterxml.jackson.core:jackson-databind:2.14.1")
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation("org.openapitools:jackson-databind-nullable:0.2.1")
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.10.0")
    implementation("com.google.code.gson:gson:2.9.1")
    implementation("io.gsonfire:gson-fire:1.9.0")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2")

    compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
    compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")

    compileOnly("org.projectlombok:lombok:1.18.24")
    compileOnly("com.google.auto.service:auto-service:1.0.1")
    annotationProcessor("com.google.auto.service:auto-service:1.0.1")
    annotationProcessor("org.projectlombok:lombok:1.18.24")

    testImplementation("org.codehaus.groovy:groovy:3.0.13")
    testImplementation("org.spockframework:spock-core:2.2-groovy-3.0")
    testImplementation("junit:junit:4.13.2")

    otelAgent("io.opentelemetry.javaagent:opentelemetry-javaagent:1.23.0")

    // Muzzle
    add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:1.23.0-alpha")
    add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations-support:1.23.0-alpha")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:1.23.0-alpha")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:1.23.0-alpha")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.assemble {
    dependsOn("shadowJar")
}

tasks.register<Jar>("extendedAgentJar") {
    group = "Build"
    description = "Produces a copy of upstream javaagent with this extension JAR included inside it"
    dependsOn(otelAgent)
    from(zipTree(otelAgent.singleFile))
    from(tasks.shadowJar.get().archiveFile) {
        into("extensions")
    }

    doFirst {
        manifest.from(
                zipTree(otelAgent.singleFile).matching {
                    include("META-INF/MANIFEST.MF")
                }.singleFile
        )
    }
}

openApiGenerate {
    generatorName.set("java")
    inputSpec.set("$projectDir/../../vulnerabilitytracer-service/api/vulnerabilitytracer-coordinator.yaml")
    outputDir.set("$buildDir/generated/openapi")
    configOptions.set(mapOf(
            "dateLibrary" to "java8",
    ))
    apiPackage.set("nl.tudelft.kponichtera.thesis.vulnerabilitytracer.api")
    modelPackage.set("nl.tudelft.kponichtera.thesis.vulnerabilitytracer.api.model")
    invokerPackage.set("nl.tudelft.kponichtera.thesis.vulnerabilitytracer.api.invoker")
}

tasks.compileJava {
    dependsOn("openApiGenerate")
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/openapi/src/main/java")
        }
    }
}
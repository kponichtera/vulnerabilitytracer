package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service;

import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ModuleVersionIdentifier;
import org.gradle.api.artifacts.result.ResolvedDependencyResult;
import org.slf4j.Logger;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;


public class DependencyService {

    private Logger logger;

    public DependencyService(Logger logger) {
        this.logger = logger;
    }

    public Set<ModuleVersionIdentifier> getProjectDependencies(Project project) {
        return project.getConfigurations().stream()
                .filter(this::shouldScanConfiguration)
                .map(this::collectDependencies)
                .flatMap(Collection::stream)
                .collect(Collectors.toSet());
    }

    private static final Set<String> CONFIGURATIONS_TO_SKIP = Set.of(
            "archives",
            "default",
            "runtime",
            "compile",
            "compileOnly"
    );

    /**
     * Configuration scanning logic, based on the one from OWASP DependencyCheck plugin.
     *
     * @param configuration
     * @return
     */
    private boolean shouldScanConfiguration(Configuration configuration) {
        return !CONFIGURATIONS_TO_SKIP.contains(configuration.getName())
                && configuration.isCanBeResolved();
    }

    private Set<ModuleVersionIdentifier> collectDependencies(Configuration configuration) {
        Set<ModuleVersionIdentifier> resolvedModules = new HashSet<>();
        configuration.getIncoming().getResolutionResult().getAllDependencies().forEach(result -> {
            if (result instanceof ResolvedDependencyResult) {
                var resolvedResult = (ResolvedDependencyResult) result;
                logger.debug("Resolved configuration {}", configuration.getName());
                resolvedModules.add(resolvedResult.getSelected().getModuleVersion());
            } else {
                logger.warn("Unable to resolve configuration {}", configuration.getName());
            }
        });
        return resolvedModules;
    }

}

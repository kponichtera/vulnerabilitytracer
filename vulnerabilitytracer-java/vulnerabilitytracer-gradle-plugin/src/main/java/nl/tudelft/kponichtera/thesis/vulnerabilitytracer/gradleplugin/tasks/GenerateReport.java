package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.tasks;

import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.extensions.VulnerabilityTracerExtension;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.DependencyService;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.ReportGenerationService;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.gradleplugin.service.ReportPersistenceService;
import org.gradle.api.DefaultTask;
import org.gradle.api.GradleException;
import org.gradle.api.logging.Logger;
import org.gradle.api.tasks.TaskAction;

import java.io.IOException;

public class GenerateReport extends DefaultTask {

    private Logger logger;

    public GenerateReport() {
        setGroup("vulnerability tracer");
        setDescription("Collect dependencies from the project for consuming by the vulnerability tracer agent.");
        this.logger = getProject().getLogger();
    }

    @TaskAction
    public void runTask() throws InterruptedException {
        var dependencyService = new DependencyService(getProject().getLogger());
        var generationService = new ReportGenerationService(getProject().getLogger());
        var persistenceService = new ReportPersistenceService(getProject().getLogger());

        // Resolve dependencies and get their actual versions
        var dependencyVersions = dependencyService.getProjectDependencies(getProject());

        // Generate the report
        var report = generationService.buildReport(dependencyVersions);

        // Save the report
        var reportOutputDirectory = getProject().getExtensions().getByType(VulnerabilityTracerExtension.class).reportOutputDirectory;
        try {
            persistenceService.saveReport(report, reportOutputDirectory);
        } catch (IOException e) {
            throw new GradleException("Error when saving report to the file", e);
        }
    }

}

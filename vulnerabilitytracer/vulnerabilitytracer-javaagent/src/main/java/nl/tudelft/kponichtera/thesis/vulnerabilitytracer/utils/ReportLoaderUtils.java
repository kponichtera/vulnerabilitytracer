package nl.tudelft.kponichtera.thesis.vulnerabilitytracer.utils;

import lombok.experimental.UtilityClass;
import nl.tudelft.kponichtera.thesis.vulnerabilitytracer.report.VulnerabilityReport;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;

/*
 * TODO: Refactor to read the file, generated by the Gradle plugin.
 */
@UtilityClass
public class ReportLoaderUtils {

    private static final String REPORT_PATH_ENV_VARIABLE = "VULNERABILITYTRACER_REPORT_PATH";
    private static final String REPORT_DEFAULT_NAME = "vulnerabilitytracer-report.json";

    public static Optional<VulnerabilityReport> loadReport() throws IOException {
        var reportPath = System.getenv(REPORT_PATH_ENV_VARIABLE);
        if (reportPath == null) {
            reportPath = REPORT_DEFAULT_NAME;
        }

        // Try to load report from provided (or default) path
        var reportFile = new File(reportPath);
        if (reportFile.exists()) {
            return Optional.of(loadReport(reportFile));
        }

        // No report file found anywhere
        return Optional.empty();
    }

    public static VulnerabilityReport loadReport(File reportFile) throws IOException {
        return ReportMapperUtils.getMapper().readValue(reportFile, VulnerabilityReport.class);
    }

    public static VulnerabilityReport loadReport(InputStream reportInputStream) throws IOException {
        return ReportMapperUtils.getMapper().readValue(reportInputStream, VulnerabilityReport.class);
    }

}

use crate::config::read_config;
use reqwest::Client;
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use tokio::signal;
use tokio::time::{self, Duration};

mod config;

#[tokio::main]
async fn main() {
    let config = read_config().expect("Failed to load configuration");

    // Atomic boolean to handle the termination of threads on SIGINT
    let running = Arc::new(AtomicBool::new(true));

    // Setup SIGINT handler to update the running flag
    let r = running.clone();
    tokio::spawn(async move {
        signal::ctrl_c().await.unwrap();
        println!("Received SIGINT, shutting down...");
        r.store(false, Ordering::SeqCst);
    });

    // Function to send a request to a specified endpoint
    let send_request = |url: String| async move {
        let client = Client::new();
        let start_time = std::time::Instant::now();
        let res = client.get(&url).send().await;
        let duration = start_time.elapsed();

        match res {
            Ok(s) => println!("success url={} status_code={} duration={}", url, s.status().as_u16(), duration.as_micros()),
            Err(e) => println!(
                "error url={} duration={} error={}",
                url,
                duration.as_micros(),
                e
            ),
        }
    };

    // Interval for triggering tasks
    let mut interval = time::interval(Duration::from_millis(config.interval_ms));
    while running.load(Ordering::SeqCst) {
        interval.tick().await;
        tokio::spawn(send_request(config.service_addr_one.clone()));
        tokio::spawn(send_request(config.service_addr_two.clone()));
    }
}

import {Injectable} from '@angular/core';
import {
  ApplyMitigationStrategyRequestPayload,
  DefaultService,
  GetDashboardVulnerabilitiesRequestPayload, GetImpactGraphRequestPayload,
  GetServiceMitigationsRequestPayload,
  GetVulnerabilityServicesRequestPayload
} from "../../../generated/vulnerabilitytracer-manager";
import {Mitigation, toAPIMitigation} from "../common/mitigation";

@Injectable({
  providedIn: 'root'
})
export class DashboardService {

  constructor(private defaultService: DefaultService) {
  }

  public getDashboardVulnerabilities(from: Date, to: Date) {
    let payload: GetDashboardVulnerabilitiesRequestPayload = {
      fromDateTime: from.toISOString(),
      toDateTime: to.toISOString(),
    }

    return this.defaultService.getDashboardVulnerabilities(payload);
  }

  public getVulnerabilityServices(vulnerabilityExternalId: string, from: Date, to: Date) {
    let payload: GetVulnerabilityServicesRequestPayload = {
      vulnerabilityExternalId: vulnerabilityExternalId,
      fromDateTime: from.toISOString(),
      toDateTime: to.toISOString(),
    }

    return this.defaultService.getVulnerabilityServices(payload);
  }

  public getServiceMitigations(vulnerabilityExternalId: string, from: Date, to: Date) {
    let payload: GetServiceMitigationsRequestPayload = {
      vulnerabilityExternalId: vulnerabilityExternalId,
      fromDateTime: from.toISOString(),
      toDateTime: to.toISOString(),
    }

    return this.defaultService.getServiceMitigations(payload);
  }

  public applyMitigationStrategy(serviceId: number, callableId: number, mitigation: Mitigation) {
    let payload: ApplyMitigationStrategyRequestPayload = {
      serviceId: serviceId,
      callableId: callableId,
      mitigationStrategy: toAPIMitigation(mitigation),
    };

    return this.defaultService.applyMitigationStrategy(payload);
  }

  public getImpactGraph(vulnerabilityExternalId: string, from: Date, to: Date) {
    let payload: GetImpactGraphRequestPayload = {
      vulnerabilityExternalId: vulnerabilityExternalId,
      fromDateTime: from.toISOString(),
      toDateTime: to.toISOString(),
    }

    return this.defaultService.getImpactGraph(payload);
  }

}

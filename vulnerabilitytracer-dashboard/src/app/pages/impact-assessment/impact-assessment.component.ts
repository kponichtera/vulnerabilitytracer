import {Component, OnInit} from '@angular/core';
import {ButtonModule} from "primeng/button";
import {ActivatedRoute, RouterLink} from "@angular/router";
import {ToolbarModule} from "primeng/toolbar";
import {InputGroupModule} from "primeng/inputgroup";
import {InputGroupAddonModule} from "primeng/inputgroupaddon";
import {CalendarModule} from "primeng/calendar";
import {FormsModule} from "@angular/forms";
import {ImpactGraphComponent} from "./impact-graph/impact-graph.component";
import {ImpactGraph} from "./impact-graph/impact-graph";
import {DashboardService} from "../../service/dashboard.service";
import {MessageService} from "primeng/api";
import {GetImpactGraphResponsePayload} from "../../../../generated/vulnerabilitytracer-manager";

const DEFAULT_DATE_INTERVAL_MINUTES = 15;

@Component({
  selector: 'app-impact-assessment',
  standalone: true,
  imports: [
    ButtonModule,
    RouterLink,
    ToolbarModule,
    InputGroupModule,
    InputGroupAddonModule,
    CalendarModule,
    FormsModule,
    ImpactGraphComponent
  ],
  templateUrl: './impact-assessment.component.html',
  styleUrl: './impact-assessment.component.scss'
})
export class ImpactAssessmentComponent implements OnInit {

  vulnerabilityId: string;

  fromDateTime: Date;
  toDateTime: Date;

  impactGraph: ImpactGraph;

  constructor(private route: ActivatedRoute,
              private dashboardService: DashboardService,
              private messageService: MessageService) {
    this.vulnerabilityId = this.route.snapshot.paramMap.get('id') || 'Unknown';
    this.toDateTime = new Date(Date.now());
    this.fromDateTime = new Date(this.toDateTime);
    this.fromDateTime.setMinutes(this.fromDateTime.getMinutes() - DEFAULT_DATE_INTERVAL_MINUTES);
  }

  ngOnInit(): void {
    // this.impactGraph = {
    //   nodes: [
    //     {id: 1, serviceName: 'Service 1', isVulnerable: false},
    //     {id: 2, serviceName: 'Service 2', isVulnerable: false},
    //     {id: 3, serviceName: 'Service 3', isVulnerable: true},
    //   ],
    //   edges: [
    //     {sourceNodeId: 1, targetNodeId: 2, label: '5'},
    //     {sourceNodeId: 2, targetNodeId: 3, label: '10'},
    //   ]
    // }
    this.reload();
  }

  reload() {
    this.dashboardService.getImpactGraph(this.vulnerabilityId, this.fromDateTime, this.toDateTime).subscribe(
      {
        next: (response: GetImpactGraphResponsePayload) => {
          this.impactGraph = this.buildImpactGraph(response);
        },
        error: (error) => {
          this.messageService.add({severity: 'error', summary: 'Error', detail: error});
        }
      }
    );
  }

  private buildImpactGraph(response: GetImpactGraphResponsePayload): ImpactGraph {
    return new ImpactGraph(response.nodes, response.edges);
  }

}

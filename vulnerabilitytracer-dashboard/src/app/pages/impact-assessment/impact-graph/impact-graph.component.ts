import {AfterViewInit, Component, ElementRef, Input, ViewChild} from '@angular/core';
import {DataSet} from 'vis-data/esnext';
import {Network} from 'vis-network/esnext';
import {ImpactGraph} from "./impact-graph";

const SERVICE_COLOR = '#2563eb';
const VULNERABLE_SERVICE_COLOR = '#ef4444';
const SERVICE_LABEL_COLOR = '#FFFFFF';
const EDGE_COLOR = '#a4a6a8';
const VULNERABLE_EDGE_COLOR = '#a73030';

@Component({
  selector: 'app-impact-graph',
  standalone: true,
  imports: [],
  templateUrl: './impact-graph.component.html',
  styleUrl: './impact-graph.component.scss'
})
export class ImpactGraphComponent implements AfterViewInit {

  @ViewChild('graphElement') graphElement: ElementRef;

  _graph: ImpactGraph;

  get graph(): ImpactGraph {
    return this._graph;
  }

  @Input()
  set graph(value: ImpactGraph) {
    this._graph = value;
    if (this._graph) {
      this.buildGraph();
    }
  }

  constructor() {}

  ngAfterViewInit(): void {
    this.buildGraph()
  }

  private buildGraph() {
    if (!this.graphElement || !this.graph) {
      return;
    }

    let nodes = new DataSet();
    let edges = new DataSet();

    for (let node of this.graph.nodes) {
      nodes.add({
        id: node.id,
        // @ts-ignore
        label: node.serviceName,
        color: node.vulnerabilityTriggerCount > 0 ? VULNERABLE_SERVICE_COLOR : SERVICE_COLOR,
        // title: 'asdasdasd'
      });
    }

    for (let edge of this.graph.edges) {
      edges.add({
        // @ts-ignore
        from: edge.sourceNodeId,
        to: edge.targetNodeId,
        label: edge.label,
        color: edge.vulnerableCallCount > 0 ? VULNERABLE_EDGE_COLOR : EDGE_COLOR,
        arrows: 'to',
      });
    }

    let data = {
      nodes: nodes,
      edges: edges
    };
    let options = {
      nodes: {
        shape: 'circle',
        font: {color: SERVICE_LABEL_COLOR}
      },
      edges: {
        width: 2,
        font: {align: 'top'},
        color: EDGE_COLOR,
      },
      layout: {
        randomSeed: undefined,
        improvedLayout:true
      },
      physics: {
        enabled: true,
        barnesHut: {
          gravitationalConstant: -10000,
          centralGravity: 0.3,
          springLength: 300,
          springConstant: 0.75,
          damping: 1,
          avoidOverlap: 0.1
        },
        solver: 'barnesHut'
      }
    };

    // @ts-ignore
    new Network(this.graphElement.nativeElement, data, options);
  }

}

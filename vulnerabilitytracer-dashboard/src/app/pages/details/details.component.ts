import {Component, OnInit} from '@angular/core';
import {ToolbarModule} from "primeng/toolbar";
import {SplitButtonModule} from "primeng/splitbutton";
import {TableModule} from "primeng/table";
import {SeverityTagComponent} from "../dashboard/severity-tag/severity-tag.component";
import {TagModule} from "primeng/tag";
import {NgIf} from "@angular/common";
import {ActivatedRoute} from "@angular/router";
import {ToastModule} from "primeng/toast";
import {CalendarModule} from "primeng/calendar";
import {InputGroupAddonModule} from "primeng/inputgroupaddon";
import {InputGroupModule} from "primeng/inputgroup";
import {FormsModule} from "@angular/forms";
import {DashboardService} from "../../service/dashboard.service";
import {
  GetVulnerabilityServicesResponsePayload,
  Notification,
  Service
} from "../../../../generated/vulnerabilitytracer-manager";
import {MessageService} from "primeng/api";
import {ServiceNotificationsComponent} from "./service-notifications/service-notifications.component";
import {NotificationDismissEvent} from "../dashboard/dashboard-notifications/dashboard-notifications-dismiss-event";
import {ServiceNotificationDismissEvent} from "./service-notifications/service-notifications-dismiss-event";

const DEFAULT_DATE_INTERVAL_MINUTES = 15;

@Component({
  selector: 'app-details',
  standalone: true,
  imports: [
    ToolbarModule,
    SplitButtonModule,
    TableModule,
    SeverityTagComponent,
    TagModule,
    NgIf,
    ToastModule,
    CalendarModule,
    InputGroupAddonModule,
    InputGroupModule,
    CalendarModule,
    FormsModule,
    ToastModule,
    ServiceNotificationsComponent,
  ],
  providers: [
    MessageService
  ],
  templateUrl: './details.component.html',
  styleUrl: './details.component.scss'
})
export class DetailsComponent implements OnInit {

  vulnerabilityId: string;

  fromDateTime: Date;
  toDateTime: Date;

  services: ServiceRow[] = [];

  constructor(private route: ActivatedRoute,
              private dashboardService: DashboardService,
              private messageService: MessageService) {
    this.vulnerabilityId = this.route.snapshot.paramMap.get('id') || 'Unknown';
    this.toDateTime = new Date(Date.now());
    this.fromDateTime = new Date(this.toDateTime);
    this.fromDateTime.setMinutes(this.fromDateTime.getMinutes() - DEFAULT_DATE_INTERVAL_MINUTES);
  }

  ngOnInit(): void {
    this.reload();
  }

  reload() {
    this.services = [];

    this.dashboardService.getVulnerabilityServices(this.vulnerabilityId, this.fromDateTime, this.toDateTime).subscribe(
      {
        next: (response: GetVulnerabilityServicesResponsePayload) => {
          response.services.forEach(service => {
            this.services.push(this.buildServiceRow(service));
          });
        },
        error: (error) => {
          this.messageService.add({severity: 'error', summary: 'Error', detail: error.message});
        }
      }
    );
  }

  protected dismissNotification(event: ServiceNotificationDismissEvent) {
    this.dashboardService.dismissNotification(event.notificationId).subscribe(
      {
        next: () => {
          this.services.forEach(service => {
            let index = service.notifications.findIndex(notification => notification.id === event.notificationId);
            if (index > -1) {
              service.notifications.splice(index, 1);
            }
          });
        },
        error: (error) => {
          this.messageService.add({severity: 'error', summary: 'Error', detail: error.message});
        }
      }
    )
  }

  private buildServiceRow(service: Service): ServiceRow {
    return new ServiceRow(service.serviceName,
      `${service.dependencyGroupId}:${service.dependencyArtifactId}:${service.dependencyVersion}`,
      service.triggerCount,
      service.enabledMitigationsCount,
      service.notifications)
  }

}

class ServiceRow {
  serviceName: string;
  dependencyName: string;
  triggerCount: number;
  mitigationsEnabledCount: number;
  notifications: Notification[];

  constructor(serviceName: string, dependencyName: string, triggerCount: number,
              mitigationsEnabledCount: number, notifications: Notification[]) {
    this.serviceName = serviceName;
    this.dependencyName = dependencyName;
    this.triggerCount = triggerCount;
    this.mitigationsEnabledCount = mitigationsEnabledCount;
    this.notifications = notifications;
  }
}

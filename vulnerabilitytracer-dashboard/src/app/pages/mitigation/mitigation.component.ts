import {Component, OnInit} from '@angular/core';
import {ToolbarModule} from "primeng/toolbar";
import {ButtonModule} from "primeng/button";
import {ActivatedRoute, RouterLink} from "@angular/router";
import {toMitigation} from "../../common/mitigation";
import {TabViewModule} from "primeng/tabview";
import {MitigationTableComponent} from "./mitigation-table/mitigation-table.component";
import {MitigationTableRow} from "./mitigation-table/mitigation-table-row";
import {MitigationTableChangeEvent} from "./mitigation-table/mitigation-table-change-event";
import {DashboardService} from "../../service/dashboard.service";
import {MessageService} from "primeng/api";
import {
  GetServiceMitigationsResponsePayload,
  ServiceMitigation
} from "../../../../generated/vulnerabilitytracer-manager";
import {CalendarModule} from "primeng/calendar";
import {InputGroupAddonModule} from "primeng/inputgroupaddon";
import {InputGroupModule} from "primeng/inputgroup";
import {FormsModule} from "@angular/forms";

const DEFAULT_DATE_INTERVAL_MINUTES = 15;

@Component({
  selector: 'app-mitigation',
  standalone: true,
  imports: [
    ToolbarModule,
    ButtonModule,
    RouterLink,
    TabViewModule,
    MitigationTableComponent,
    CalendarModule,
    InputGroupAddonModule,
    InputGroupModule,
    FormsModule
  ],
  templateUrl: './mitigation.component.html',
  styleUrl: './mitigation.component.scss'
})
export class MitigationComponent implements OnInit {

  vulnerabilityId: string;

  fromDateTime: Date;
  toDateTime: Date;

  activeIndex: number = 0;

  serviceTabs: ServiceTab[] = []

  constructor(private route: ActivatedRoute,
              private dashboardService: DashboardService,
              private messageService: MessageService) {
    this.vulnerabilityId = this.route.snapshot.paramMap.get('id') || 'Unknown';
    this.toDateTime = new Date(Date.now());
    this.fromDateTime = new Date(this.toDateTime);
    this.fromDateTime.setMinutes(this.fromDateTime.getMinutes() - DEFAULT_DATE_INTERVAL_MINUTES);
  }

  ngOnInit(): void {
    this.reload();
  }

  reload() {
    this.serviceTabs = [];

    this.dashboardService.getServiceMitigations(this.vulnerabilityId, this.fromDateTime, this.toDateTime).subscribe(
      {
        next: (response: GetServiceMitigationsResponsePayload) => {
          response.services.forEach(service => {
            this.serviceTabs.push(this.buildServiceTab(service));
          });
        },
        error: (error) => {
          this.messageService.add({severity: 'error', summary: 'Error', detail: error.message});
        }
      }
    );
  }

  onMitigationChange(event: MitigationTableChangeEvent) {
    console.log('Mitigation change event: ' + event.mitigation);
  }

  private buildServiceTab(serviceMitigation: ServiceMitigation): ServiceTab {
    let mitigations: MitigationTableRow[] = [];
    serviceMitigation.callables.forEach(mitigation => {
      let row = new MitigationTableRow(
        mitigation.callableId,
        `${mitigation.dependencyGroupId}:${mitigation.dependencyArtifactId}.${mitigation.dependencyVersion}()`,
        `${mitigation.callablePackageName}.${mitigation.callableClassName}.${mitigation.callableMethodName}()`,
        mitigation.totalTriggerCount,
        mitigation.mitigatedTriggerCount,
        toMitigation(mitigation.mitigationStrategy)
      )
      mitigations.push(row);
    });
    return new ServiceTab(serviceMitigation.serviceName, mitigations);
  }

}

class ServiceTab {
  serviceName: string;
  mitigations: MitigationTableRow[];

  constructor(serviceName: string, mitigations: MitigationTableRow[]) {
    this.serviceName = serviceName;
    this.mitigations = mitigations;
  }
}

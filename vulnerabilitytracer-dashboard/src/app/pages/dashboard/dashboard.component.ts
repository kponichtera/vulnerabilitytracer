import {Component, OnInit} from '@angular/core';
import {TableModule} from "primeng/table";
import {ButtonModule} from "primeng/button";
import {Severity} from "../../common/severity";
import {SeverityTagComponent} from "./severity-tag/severity-tag.component";
import {Router, RouterLink, RouterOutlet} from "@angular/router";
import {CalendarModule} from "primeng/calendar";
import {InputGroupAddonModule} from "primeng/inputgroupaddon";
import {InputGroupModule} from "primeng/inputgroup";
import {FormsModule} from "@angular/forms";
import {DashboardService} from "../../service/dashboard.service";
import {
  GetDashboardVulnerabilitiesResponsePayload,
  Vulnerability,
  VulnerabilitySeverity
} from "../../../../generated/vulnerabilitytracer-manager";
import {MessageService} from "primeng/api";
import {ToastModule} from "primeng/toast";

const DEFAULT_DATE_INTERVAL_MINUTES = 15;

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    TableModule,
    ButtonModule,
    SeverityTagComponent,
    RouterLink,
    CalendarModule,
    InputGroupAddonModule,
    InputGroupModule,
    FormsModule,
    RouterOutlet,
    ToastModule,
  ],
  providers: [
    MessageService
  ],
  templateUrl: './dashboard.component.html',
  styleUrl: './dashboard.component.scss'
})
export class DashboardComponent implements OnInit {

  fromDateTime: Date;
  toDateTime: Date;

  vulnerabilities: VulnerabilityRow[] = []

  constructor(private dashboardService: DashboardService,
              private messageService: MessageService,
              private router: Router) {
    this.toDateTime = new Date(Date.now());
    this.fromDateTime = new Date(this.toDateTime);
    this.fromDateTime.setMinutes(this.fromDateTime.getMinutes() - DEFAULT_DATE_INTERVAL_MINUTES);
  }

  ngOnInit(): void {
    this.reload();
  }

  reload() {
    this.vulnerabilities = [];
    this.dashboardService.getDashboardVulnerabilities(this.fromDateTime, this.toDateTime).subscribe(
      {
        next: (response: GetDashboardVulnerabilitiesResponsePayload) => {
          response.vulnerabilities.forEach(vulnerability => {
            this.vulnerabilities.push(this.buildVulnerabilityRow(vulnerability));
          });
        },
        error: (error) => {
          this.messageService.add({severity: 'error', summary: 'Error', detail: error.message});
        }
      }
    );
  }

  private buildVulnerabilityRow(vulnerability: Vulnerability): VulnerabilityRow {
    return new VulnerabilityRow(vulnerability.externalId, vulnerability.triggerCount, vulnerability.severity);
  }

}

class VulnerabilityRow {
  id: string;
  triggerCount: number;
  severity: Severity;

  constructor(id: string, triggerCount: number, severity: VulnerabilitySeverity) {
    this.id = id;
    this.triggerCount = triggerCount;
    switch (severity) {
      case "CRITICAL":
        this.severity = Severity.CRITICAL;
        break;
      case "HIGH":
        this.severity = Severity.HIGH;
        break;
      case "MEDIUM":
        this.severity = Severity.MEDIUM;
        break;
      case "MODERATE":
        this.severity = Severity.MODERATE;
        break;
      case "LOW":
        this.severity = Severity.LOW;
        break;
      default:
        this.severity = Severity.UNDEFINED;
        break;
    }
  }

}

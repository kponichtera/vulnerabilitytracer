package nl.tudelft.kponichtera.thesis.generator.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import nl.tudelft.kponichtera.thesis.generator.properties.GeneratorProperties;
import nl.tudelft.kponichtera.thesis.generator.service.RandomGeneratorService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequiredArgsConstructor
public class GeneratorController {

    private final RandomGeneratorService randomGeneratorService;
    private final GeneratorProperties generatorProperties;

    @GetMapping("/uuid")
    public void uuid() {
        if (!generatorProperties.isEnabled()) {
            log.info("UUID generation endpoint executed, but generator is disabled");
            return;
        }
        log.info("UUID generation endpoint executed. Generating...");

        var randomUUID = randomGeneratorService.generateRandomUUID();

        log.info("UUID returned from the generator: {}", randomUUID);
    }

    @GetMapping("/int")
    public void integer() {
        if (!generatorProperties.isEnabled()) {
            log.info("Integer generation endpoint executed, but generator is disabled");
            return;
        }
        log.info("Integer generation endpoint executed. Generating...");

        var randomNumber = randomGeneratorService.generateRandomInteger();

        log.info("Integer returned from the generator: {}", randomNumber);
    }

}
